[
  {
    "Requirement": "设置初始工作模式字为速率阻尼；",
    "Correct answer": "Set currentmode RDSM;",
    "LLM inference": "Set currentmode RDSM;",
    "LLM total answer": "```json\n{\n  \"BNF Grammar\": {\n    \"SetFunc\": \"'Set' <Identifier> <Expression>\",\n    \"Identifier\": \"[a-zA-Z_] [a-zA-Z0-9_]*\",\n    \"AutomicFunc\": \"<TimeConstraint>? (<InitFunc> | <SetFunc> | <GetDataFunc> | <SendDataFunc> | <ComputeFunc> | <ProTMFunc> | <ProTCFunc>) <ReqCapByForm>? <TimeConsDef>?\",\n    \"ReqCapByForm\": \"'ReqCapByTable' <Identifier> | 'ReqCapByFormula' <Identifier> | 'ReqCapByNL' <String> | 'ReqCapByPseudoCode' <Identifier> | 'ReqCapByFlowChart' <Identifier>\"\n  },\n  \"Device Library\": {},\n  \"Data Dictionary\": {\n    \"currentmode\": \"工作模式字\"\n  },\n  \"Output DSL\": \"Set currentmode RDSM;\"\n}\n```"
  },
  {
    "Requirement": "开32ms定时器中断。功能描述：通过向定时控制寄存器GTCR0的D[0]位写一次‘1’，可启动定时器以产生连续的32ms周期中断信号，寄存器GTCR0的地址为0x8083。调用条件：软件初始化后",
    "Correct answer": "Init timer32 1;",
    "LLM inference": "Init timer32 1;",
    "LLM total answer": "```json\n{\n  \"BNF Grammar\": {\n    \"InitFunc\": \"'Init' <timerName> <InitValue>\",\n    \"timerName\": \"<Identifier>\",\n    \"InitValue\": \"<Identifier>\",\n    \"Identifier\": \"[a-zA-Z_] [a-zA-Z0-9_]*\",\n    \"AutomicFunc\": \"<TimeConstraint>? ( <InitFunc> | <SetFunc> | <GetDataFunc> | <SendDataFunc> | <ComputeFunc> | <ProTMFunc> | <ProTCFunc> ) <ReqCapByForm>? <TimeConsDef>?\",\n    \"ReqCapByForm\": \"'ReqCapByTable' <Identifier> | 'ReqCapByFormula' <Identifier> | 'ReqCapByNL' <String> | 'ReqCapByPseudoCode' <Identifier> | 'ReqCapByFlowChart' <Identifier>\"\n  },\n  \"Device Library\": {},\n  \"Data Dictionary\": {},\n  \"Output DSL\": \"Init timer32 1;\"\n}\n```"
  },
  {
    "Requirement": "遥控处理。功能描述：通过串口接收地面指令，进行指令校验，设置卫星工作模式字。输入：遥控接收串口地址。输出：下一周期工作模式字。 参照遥控指令格式信息表",
    "Correct answer": "ProTC OBDH {currentmode} ReqCapByTable ProTable_TC;",
    "LLM inference": "ProTC OBDH {currentmode} ReqCapByTable ProTable_TC;",
    "LLM total answer": "```json\n{\n  \"BNF Grammar\": {\n    \"ProTCFunc\": \"'ProTC' <DeviceName> '{' <DataSet> '}'\",\n    \"DeviceName\": \"<Identifier>\",\n    \"Identifier\": \"[a-zA-Z_] [a-zA-Z0-9_]*\",\n    \"DataSet\": \"<Identifier> (',' <Identifier>)*\",\n    \"AutomicFunc\": \"<TimeConstraint>? (<InitFunc> | <SetFunc> | <GetDataFunc> | <SendDataFunc> | <ComputeFunc> | <ProTMFunc> | <ProTCFunc>) <ReqCapByForm>? <TimeConsDef>?\",\n    \"ReqCapByForm\": \"'ReqCapByTable' <Identifier> | 'ReqCapByFormula' <Identifier> | 'ReqCapByNL' <String> | 'ReqCapByPseudoCode' <Identifier> | 'ReqCapByFlowChart' <Identifier>\"\n  },\n  \"Device Library\": {\n    \"ExtComputer\": \"OBDH\"\n  },\n  \"Data Dictionary\": {\n    \"DataSet\": \"currentmode\"\n  },\n  \"Output DSL\": \"ProTC OBDH {currentmode} ReqCapByTable ProTable_TC;\"\n}\n```"
  },
  {
    "Requirement": "陀螺数据采集。功能描述：陀螺数据采集。输入：串口操作地址。输出：加电状态、角速度模拟量。陀螺数据采集具体数据传输格式见陀螺取数指令格式表和陀螺测量数据格式表",
    "Correct answer": "GetData Gyro3F {deltG[9], GyroPowerState[9]} ReqCapByTable Gyro_DataFormat_Tables;",
    "LLM inference": "GetData Gyro3F {deltG[9], GyroPowerState[9]} ReqCapByTable Gyro_TransTable;",
    "LLM total answer": "```json\n{\n  \"BNF Grammar\": {\n    \"GetDataFunc\": \"'GetData' <DeviceName> '{' <DataSet> '}'\",\n    \"DeviceName\": \"<Identifier>\",\n    \"Identifier\": \"[a-zA-Z_] [a-zA-Z0-9_]*\",\n    \"DataSet\": \"<Identifier> (',' <Identifier>)*\",\n    \"AutomicFunc\": \"<TimeConstraint>? (<InitFunc> | <SetFunc> | <GetDataFunc> | <SendDataFunc> | <ComputeFunc> | <ProTMFunc> | <ProTCFunc>) <ReqCapByForm>? <TimeConsDef>?\",\n    \"ReqCapByForm\": \"'ReqCapByTable' <Identifier> | 'ReqCapByFormula' <Identifier> | 'ReqCapByNL' <String> | 'ReqCapByPseudoCode' <Identifier> | 'ReqCapByFlowChart' <Identifier>\"\n  },\n  \"Device Library\": {\n    \"Sensor\": \"Gyro3F\"\n  },\n  \"Data Dictionary\": {\n    \"DataSet\": [\n      \"GyroPowerState[9]\",\n      \"deltG[9]\"\n    ],\n    \"ReqCapByForm\": [\n      \"Gyro_TransTable\"\n    ]\n  },\n  \"Output DSL\": \"GetData Gyro3F {deltG[9], GyroPowerState[9]} ReqCapByTable Gyro_TransTable;\"\n}\n```"
  },
  {
    "Requirement": "太阳敏感器数据采集。功能描述：太阳敏感器数据采集。输入：AD采集寄存器地址。输出：部件加电状态、太阳可见标志及测量角度。参照太阳敏感器数据采集信息表和太阳敏感器角度处理表",
    "Correct answer": "GetData DSS {dssPower, viewCode, AttigDss[2]} ReqCapByTable DSS_AcquisitionTable;",
    "LLM inference": "GetData DSS {dssPower, viewCode, AttigDss[2]} ReqCapByTable Dss_TransTable;",
    "LLM total answer": "```json\n{\n  \"BNF Grammar\": {\n    \"GetDataFunc\": \"'GetData' <DeviceName> '{' <DataSet> '}'\",\n    \"DeviceName\": \"<Identifier>\",\n    \"Identifier\": \"[a-zA-Z_] [a-zA-Z0-9_]*\",\n    \"DataSet\": \"<Identifier> (',' <Identifier>)*\",\n    \"AutomicFunc\": \"<TimeConstraint>? (<InitFunc> | <SetFunc> | <GetDataFunc> | <SendDataFunc> | <ComputeFunc> | <ProTMFunc> | <ProTCFunc>) <ReqCapByForm>? <TimeConsDef>?\",\n    \"ReqCapByForm\": \"'ReqCapByTable' <Identifier> | 'ReqCapByFormula' <Identifier> | 'ReqCapByNL' <String> | 'ReqCapByPseudoCode' <Identifier> | 'ReqCapByFlowChart' <Identifier>\"\n  },\n  \"Device Library\": {\n    \"Sensor\": \"DSS\"\n  },\n  \"Data Dictionary\": {\n    \"DataSet\": \"dssPower, viewCode, AttigDss[2]\",\n    \"ReqCapByForm\": \"dss_proTable1, dss_proTable2, dss_proTable3, Dss_TransTable\"\n  },\n  \"Output DSL\": \"GetData DSS {dssPower, viewCode, AttigDss[2]} ReqCapByTable Dss_TransTable;\"\n}\n```"
  },
  {
    "Requirement": "推力器数据采集。功能描述：推力器数据采集。输入：AD采集寄存器地址。输出：推力器加电状态。参照推力器数据采集信息表",
    "Correct answer": "GetData JET {JetPowerState} ReqCapByTable Thruster_Data_Table;",
    "LLM inference": "GetData JET {JetPowerState} ReqCapByTable jet_proTable2;",
    "LLM total answer": "```json\n{\n  \"BNF Grammar\": {\n    \"GetDataFunc\": \"'GetData' <DeviceName> '{' <DataSet> '}'\",\n    \"DeviceName\": \"<Identifier>\",\n    \"Identifier\": \"[a-zA-Z_] [a-zA-Z0-9_]*\",\n    \"DataSet\": \"<Identifier> (',' <Identifier>)*\",\n    \"AutomicFunc\": \"<TimeConstraint>? (<InitFunc> | <SetFunc> | <GetDataFunc> | <SendDataFunc> | <ComputeFunc> | <ProTMFunc> | <ProTCFunc>) <ReqCapByForm>? <TimeConsDef>?\",\n    \"ReqCapByForm\": \"'ReqCapByTable' <Identifier> | 'ReqCapByFormula' <Identifier> | 'ReqCapByNL' <String> | 'ReqCapByPseudoCode' <Identifier> | 'ReqCapByFlowChart' <Identifier>\"\n  },\n  \"Device Library\": {\n    \"Actuator\": \"JET\"\n  },\n  \"Data Dictionary\": {\n    \"DataSet\": \"JetPowerState\"\n  },\n  \"Output DSL\": \"GetData JET {JetPowerState} ReqCapByTable jet_proTable2;\"\n}\n```"
  },
  {
    "Requirement": "姿态确定。功能描述：卫星三轴姿态确定。输入：陀螺测量角速度，太阳敏感器采集的姿态角度，太阳可见标志。输出：三轴姿态角度、三轴角速度，工作模式字。算法参照算法表",
    "Correct answer": "Compute {attiang, attirate, currentmode} {deltG[9], AttigDss[2], viewCode} ReqCapByTable B3Table;",
    "LLM inference": "Compute {attiang, attirate, currentmode} {deltG[9], AttigDss[2], viewCode} ReqCapByTable B3Table;",
    "LLM total answer": "```json\n{\n  \"BNF Grammar\": {\n    \"ComputeFunc\": \"::= ('CalEnv' | 'ProVId' | 'DetAtt' | 'CalTar' | 'CalCtrl' | 'SwitchMode') <OutputData> <InputData>\",\n    \"AutomicFunc\": \"::= <TimeConstraint>? ( <InitFunc> | <SetFunc> | <GetDataFunc> | <SendDataFunc> | <ComputeFunc> | <ProTMFunc> | <ProTCFunc> ) <ReqCapByForm>? <TimeConsDef>?\",\n    \"ReqCapByForm\": \"::= 'ReqCapByTable' <Identifier> | 'ReqCapByFormula' <Identifier> | 'ReqCapByNL' <String> | 'ReqCapByPseudoCode' <Identifier> | 'ReqCapByFlowChart' <Identifier>\"\n  },\n  \"Device Library\": {\n    \"Sensor\": [\"太阳敏感器(DSS)\", \"三浮陀螺(Gyro3F)\"],\n    \"Actuator\": [\"推力器(JET)\"],\n    \"ExtComputer\": [\"数管计算机(OBDH)\"],\n    \"Controller\": [\"中央控制单元(AOCC)\"]\n  },\n  \"Data Dictionary\": {\n    \"Input\": [\"陀螺测量角速度(deltG[9])\", \"太阳敏感器采集的姿态角度(AttigDss[2])\", \"太阳可见标志(viewCode)\"],\n    \"Output\": [\"三轴姿态角度(attiang)\", \"三轴角速度(attirate)\", \"工作模式字(currentmode)\"],\n    \"ReqCapByForm\": [\"姿态确定表格(B3Table)\"]\n  },\n  \"Output DSL\": \"Compute {attiang, attirate, currentmode} {deltG[9], AttigDss[2], viewCode} ReqCapByTable B3Table;\"\n}\n```"
  },
  {
    "Requirement": "控制量计算。功能描述：根据卫星当前姿态及目标姿态计算控制量。输入：卫星当前三轴姿态角及角速度，目标角度及角速度（三轴角度偏置量及角速度偏置量）。输出：三轴控制量。",
    "Correct answer": "Compute {pulseWidth} {attiang, attirate, attiangT, attirateT} ReqCapByTable B4Table;",
    "LLM inference": "Compute {pulseWidth} {attiang, attirate, attiangT, attirateT} ReqCapByTable B4Table;",
    "LLM total answer": "```json\n{\n  \"BNF Grammar\": {\n    \"ComputeFunc\": \"::= ('CalEnv' | 'ProVId' | 'DetAtt' | 'CalTar' | 'CalCtrl' | 'SwitchMode') <OutputData> <InputData>\",\n    \"AutomicFunc\": \"::= <TimeConstraint>? ( <InitFunc> | <SetFunc> | <GetDataFunc> | <SendDataFunc> | <ComputeFunc> | <ProTMFunc> | <ProTCFunc> ) <ReqCapByForm>? <TimeConsDef>?\",\n    \"ReqCapByForm\": \"::= 'ReqCapByTable' <Identifier> | 'ReqCapByFormula' <Identifier> | 'ReqCapByNL' <String> | 'ReqCapByPseudoCode' <Identifier> | 'ReqCapByFlowChart' <Identifier>\"\n  },\n  \"Device Library\": {\n    \"Sensor\": [\"太阳敏感器(DSS)\", \"三浮陀螺(Gyro3F)\"],\n    \"Actuator\": [\"推力器(JET)\"],\n    \"ExtComputer\": [\"数管计算机(OBDH)\"],\n    \"Controller\": [\"中央控制单元(AOCC)\"]\n  },\n  \"Data Dictionary\": {\n    \"Input\": [\"attiang\", \"attirate\", \"attiangT\", \"attirateT\"],\n    \"Output\": [\"pulseWidth\"],\n    \"ReqCapByForm\": [\"B4Table\"]\n  },\n  \"Output DSL\": \"Compute {pulseWidth} {attiang, attirate, attiangT, attirateT} ReqCapByTable B4Table;\"\n}\n```"
  },
  {
    "Requirement": "太阳搜索不成功故障诊断。功能描述：太阳搜索不成功后切换备份太阳敏感器。输入：太阳可见标志。输出：太阳敏感器加断电开关信号，推力器开关信号。",
    "Correct answer": "Compute {dssPower, jetPower} {viewCode} ReqCapByTable F1Table;",
    "LLM inference": "Compute {dssPower, jetPower} {viewCode} ReqCapByTable B5Table;",
    "LLM total answer": "```json\n{\n  \"BNF Grammar\": {\n    \"<ComputeFunc>\": \"::= ('CalEnv' | 'ProVId' | 'DetAtt' | 'CalTar' | 'CalCtrl' | 'SwitchMode') <OutputData> <InputData>\",\n    \"<AutomicFunc>\": \"::= <TimeConstraint>? ( <InitFunc> | <SetFunc> | <GetDataFunc> | <SendDataFunc> | <ComputeFunc> | <ProTMFunc> | <ProTCFunc> ) <ReqCapByForm>? <TimeConsDef>?\",\n    \"<ReqCapByForm>\": \"::= 'ReqCapByTable' <Identifier> | 'ReqCapByFormula' <Identifier> | 'ReqCapByNL' <String> | 'ReqCapByPseudoCode' <Identifier> | 'ReqCapByFlowChart' <Identifier>\"\n  },\n  \"Device Library\": {\n    \"Sensor\": \"太阳敏感器(DSS)\",\n    \"Actuator\": \"推力器(JET)\"\n  },\n  \"Data Dictionary\": {\n    \"Input\": \"太阳可见标志: viewCode\",\n    \"Output\": \"太阳敏感器加断电开关信号: dssPower, 推力器开关信号: jetPower\"\n  },\n  \"Output DSL\": \"Compute {dssPower, jetPower} {viewCode} ReqCapByTable B5Table;\"\n}\n```"
  },
  {
    "Requirement": "推力器频繁喷气故障诊断。功能描述：推力器频繁喷气故障诊断。输入：推力器喷气间隔时间。输出：推力器开关信号。",
    "Correct answer": "Compute {jetPower} {jetT} ReqCapByTable FaultTable1;",
    "LLM inference": "Compute {jetPower} {jetT} ReqCapByTable B4Table;",
    "LLM total answer": "```json\n{\n  \"BNF Grammar\": {\n    \"<ComputeFunc>\": \"::= ('CalEnv' | 'ProVId' | 'DetAtt' | 'CalTar' | 'CalCtrl' | 'SwitchMode') <OutputData> <InputData>\",\n    \"<AutomicFunc>\": \"::= <TimeConstraint>? ( <InitFunc> | <SetFunc> | <GetDataFunc> | <SendDataFunc> | <ComputeFunc> | <ProTMFunc> | <ProTCFunc> ) <ReqCapByForm>? <TimeConsDef>?\",\n    \"<ReqCapByForm>\": \"::= 'ReqCapByTable' <Identifier> | 'ReqCapByFormula' <Identifier> | 'ReqCapByNL' <String> | 'ReqCapByPseudoCode' <Identifier> | 'ReqCapByFlowChart' <Identifier>\"\n  },\n  \"Device Library\": {\n    \"Actuator\": \"推力器(JET)\"\n  },\n  \"Data Dictionary\": {\n    \"Input\": \"推力器喷气间隔时间: jetT\",\n    \"Output\": \"推力器开关信号: jetPower\"\n  },\n  \"Output DSL\": \"Compute {jetPower} {jetT} ReqCapByTable B4Table;\"\n}\n```"
  },
  {
    "Requirement": "陀螺控制输出。功能描述：三浮陀螺控制输出。调用条件：上电初始化时调用。输入：陀螺控制开关寄存器地址。输出：陀螺控制开关信号。参照陀螺控制指令表",
    "Correct answer": "SendData Gyro3F {gyroPower};",
    "LLM inference": "SendData Gyro3F { gyroPower };",
    "LLM total answer": "```json\n{\n  \"BNF Grammar\": {\n    \"SendDataFunc\": \"'SendData' <DeviceName> '{' <DataSet> '}'\",\n    \"DeviceName\": \"<Identifier>\",\n    \"DataSet\": \"<Identifier> (',' <Identifier>)*\",\n    \"Identifier\": \"[a-zA-Z_] [a-zA-Z0-9_]*\"\n  },\n  \"Device Library\": {\n    \"Gyro3F\": \"三浮陀螺\"\n  },\n  \"Data Dictionary\": {\n    \"gyroPower\": \"陀螺开关信号\"\n  },\n  \"Output DSL\": \"SendData Gyro3F { gyroPower };\"\n}\n```"
  },
  {
    "Requirement": "太阳敏感器控制输出。功能描述：太阳敏感器开关控制。调用条件：上电初始化、或太阳敏感器不可见故障时调用。输入：太阳敏感器开关控制寄存器地址。输出：太阳敏感器开关控制信号。具体操作见太阳敏感器开关控制信息表。",
    "Correct answer": "SendData DSS {dssPower} ReqCapByTable DSS_ControlTable;",
    "LLM inference": "SendData DSS { dssPower };",
    "LLM total answer": "```json\n{\n  \"BNF Grammar\": {\n    \"SendDataFunc\": \"'SendData' <DeviceName> '{' <DataSet> '}'\",\n    \"DeviceName\": \"<Identifier>\",\n    \"DataSet\": \"<Identifier> (',' <Identifier>)*\",\n    \"Identifier\": \"[a-zA-Z_] [a-zA-Z0-9_]*\"\n  },\n  \"Device Library\": {\n    \"Sensor\": \"DSS\"\n  },\n  \"Data Dictionary\": {\n    \"DataSet\": \"dssPower\"\n  },\n  \"Output DSL\": \"SendData DSS { dssPower };\"\n}\n```"
  },
  {
    "Requirement": "推力器输出。功能描述：三轴控制量分配给各推力器。输入：三轴控制量。输出：各推力器输出。参照推力器输出控制操作表",
    "Correct answer": "SendData JET {pulseWidth} ReqCapByTable ThrusterOutputControlTable;",
    "LLM inference": "SendData JET { pulseWidth };",
    "LLM total answer": "```json\n{\n  \"BNF Grammar\": {\n    \"SendDataFunc\": \"'SendData' <DeviceName> '{' <DataSet> '}'\",\n    \"DeviceName\": \"<Identifier>\",\n    \"DataSet\": \"<Identifier> (',' <Identifier>)*\",\n    \"Identifier\": \"[a-zA-Z_] [a-zA-Z0-9_]*\"\n  },\n  \"Device Library\": {\n    \"Actuator\": \"JET\"\n  },\n  \"Data Dictionary\": {\n    \"DataSet\": \"pulseWidth\"\n  },\n  \"Output DSL\": \"SendData JET { pulseWidth };\"\n}\n```"
  },
  {
    "Requirement": "遥测处理。功能描述：打包软件运行状态，通过串口发送给数管。输入：卫星当前工作模式字，当前角度及当前速度，串口通信地址。输出：无。遥测数据格式参照遥测数据格式表",
    "Correct answer": "ProTM OBDH {currentmode, attiang, attirate} ReqCapByTable ProTable_TM;",
    "LLM inference": "ProTM OBDH {currentmode, attiang, attirate} ReqCapByTable ProTable_TM;",
    "LLM total answer": "```json\n{\n  \"BNF Grammar\": {\n    \"ProTMFunc\": \"'ProTM' <DeviceName> '{' <DataSet> '}'\",\n    \"DeviceName\": \"<Identifier>\",\n    \"Identifier\": \"[a-zA-Z_] [a-zA-Z0-9_]*\",\n    \"DataSet\": \"<Identifier> (',' <Identifier>)*\",\n    \"AutomicFunc\": \"<TimeConstraint>? (<InitFunc> | <SetFunc> | <GetDataFunc> | <SendDataFunc> | <ComputeFunc> | <ProTMFunc> | <ProTCFunc>) <ReqCapByForm>? <TimeConsDef>?\",\n    \"ReqCapByForm\": \"'ReqCapByTable' <Identifier> | 'ReqCapByFormula' <Identifier> | 'ReqCapByNL' <String> | 'ReqCapByPseudoCode' <Identifier> | 'ReqCapByFlowChart' <Identifier>\"\n  },\n  \"Device Library\": {\n    \"ExtComputer\": \"OBDH\"\n  },\n  \"Data Dictionary\": {\n    \"currentmode\": \"工作模式字\",\n    \"attiang\": \"三轴姿态角\",\n    \"attirate\": \"三轴角速度\"\n  },\n  \"Output DSL\": \"ProTM OBDH {currentmode, attiang, attirate} ReqCapByTable ProTable_TM;\"\n}\n```"
  }
]