You are an expert on Domain Specific Language Generation, and you need to write formal requirements with a domain-specific language for the given natural language requirements. First, you should find a grammar that contains all the necessary BNF rules. Then, you should find the set that contains all the necessary device and data dictionary. Finally, you should write formal requirements that confirm to your predicted rules.
Before you output the final requirement, you need to output "SpaceRDL:" as the prefix and "END" as the suffix of the final requirement.  
You should follow the BNF template of <AutomicFunc> strictly to generate the final requirements，If there is a <TimeConstraint>, it should be at the beginning of the <AutomicFunc>.Please do not output comments and other irrelevant information.
G: 
<Literal>         ::= <Number> | <Decimal> | <BoolConst> | <HexConst> | <BinConst> | <StringConst> | <Time>
<Number>          ::= '0' | [1-9][0-9]*
<Decimal>         ::= <Number> '.' [0-9]+
<BoolConst>       ::= 'true' | 'false'
<HexConst>        ::= '0x' [0-9a-fA-F]+
<BinConst>        ::= '0' | '1'
<StringConst>     ::= '"' (可打印字符)* '"' 
<Time>            ::= <Number> ('s' | 'ms' | 'us')

<Note>            ::= '/*' <StringConst> '*/'

<Identifier>      ::= [a-zA-Z_] [a-zA-Z0-9_]* 
<DataType>    ::= 'Int' | 'Unsigned Int' | 'Float' | 'Double' | 'Bool' | 'String' | 'TR32' <DataType>

<ArithmeticSymbol> ::= '+' | '-' | '*' | '/' | '%' | '^'
<LogicSymbol>      ::= 'and' | 'or' | 'not'
<CompareSymbol>    ::= '<' | '<=' | '==' | '>=' | '>' | '!='

<BoolExpr>        ::= <SingleBoolExpr> (('and' | 'or') <SingleBoolExpr>)*
<SingleBoolExpr>  ::= <BoolConst> | '(' <Identifier> <CompareSymbol> <Literal> ')'

// 系统组成运行平台
<SystemDef>       ::= 'System' '{' <CompDef>  <ControlDef>  <ConnectDef>* '}'
<CompDef>         ::= 'Device' <SubType> <DeviceName> '{' <CompAttr> '}'
<SubType>         ::= <Identifier>
<DeviceName> ::= <Identifier>

<CompAttr>        ::= ('GroupNum' ':' <UNSIGNEDNUMBER>)? <PortDef>+ ('ResponseTime' ':' <Time>)?
<PortDef>         ::= 'Port' <PortName> '(' <HEX_CONST> ')' ':' <PortAttr> (',' <PortAttr>)*
<PortAttr>        ::= <Identifier> ',' <Identifier>  // 数据名与协议表

// 控制计算机定义
<ControlDef>      ::= 'Controller' <ControllerType> <ControllerName> '{' <TimerDef> <ControlPeriod> <InterruptDef> '}'
<ControllerType>  ::= <Identifier>
<ControllerName>  ::= <Identifier>
<TimerDef>        ::= 'Timer' <Identifier> '{' 'Interval' ':' <Time> 'RegAddr' ':' <HEX_CONST> '}'
<ControlPeriod>   ::= 'ControlPeriod' ':' <Time>
<InterruptDef>    ::= 'Interrupt' <Identifier> '{' 'Trigger' ':' <TimerDef> '}'

// 数据声明
<DataDeclaration> ::= ('DeviceDataDeclaration' | 'BusinessDataDeclaration') '{' <VarDef>+ '}'
<VarDef>          ::= ('TR32' <DataType>)? <Identifier> ('[' <Number> ']')? (<TransTable>)? (':' <InitValue>)? ';'
<TransTable>      ::= <Identifier>  // 转换表引用
<InitValue>       ::= <Literal> | <Identifier>

// 依赖关系
<Dependencies>    ::= 'Dependencies' '{' (<DataDependency> | <ControlDependency>)+ '}'
<DataDependency>  ::= <Identifier> '{' <DataSet> '}' 'DependsOn' <Identifier> ';'
<ControlDependency> ::= <Identifier> '{' <DeviceSet> '}' 'DependsOn' <Identifier> ';'
<DataSet>         ::= <Identifier> (',' <Identifier>)*
<DeviceSet>       ::= <Identifier> (',' <Identifier>)*

// 操作性语句
<TimeConstraint>  ::= ('At' '(' <Time> (',' 'Period')? ')' | 
                      'In' '(' <Time> | '[' <Time> ',' <Time> ']' ')' | 
                      'After' '(' <Time> | '[' <Time> ',' <Time> ']' ')' | 
                      'Over' '(' <Time> ',' ('c' | 'nc') ',' <Number> ')')

<ReqCapByForm>    ::= 'ReqCapByTable' <Identifier> | 
                      'ReqCapByFormula' <Identifier> | 
                      'ReqCapByNL' <String> | 
                      'ReqCapByPseudoCode' <Identifier> | 
                      'ReqCapByFlowChart' <Identifier>
<TimeConsDef>     ::= 'Finished' 'Within' <Time>

// 原子指令模板
<InitFunc>        ::= 'Init' <PortName> '{' <Config> '}'
<SetFunc>         ::= 'Set' <Identifier> <Expression>
<GetDataFunc>     ::= 'GetData' <DeviceName> '{' <DataSet> '}'
<SendDataFunc>    ::= 'SendData'  <DeviceName>  '{' <DataSet> '}'
<ComputeFunc>     ::= 'Compute' <OutputData> <InputData>
<ProTMFunc>       ::= 'ProTM' <Identifier> '{' <DataSet> '}'
<ProTCFunc>       ::= 'ProTC' <Identifier> '{' <DataSet> '}'

<AutomicFunc>     ::= <TimeConstraint>? ( 
    <InitFunc> | <SetFunc> | <GetDataFunc> | <SendDataFunc> | 
    <ComputeFunc> | <ProTMFunc> | <ProTCFunc> 
) <ReqCapByForm>? <TimeConsDef>?

D:
{device}

T:
{data_dictionary}

{example}

x: {requirement}

G(x)：