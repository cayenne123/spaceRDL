[
  {
    "Requirement": "功能描述：   应急软件初始化功能在软件上电或复位时调用，完成应急软件相关变量的初始化工作和硬件初始化。 处理： 完成80C32E处理器初始化、软件变量初始化、ASIC芯片初始化、1553B初始化，初始化流程的前后顺序可适当调整。 （1）80C32E处理器初始化： 初始化项目|寄存器名|初始值|说明 中断使能寄存器|IE|0x00|关闭中断。 计时器控制寄存器|TCON|0x05|外部中断0、1触发方式设置为下降沿触发。 计时器模式寄存器|TMOD|0x61|定时器1工作模式为2：自动装入TL1计数（8位）;定时器0工作模式为1: 16位定时器 定时器1初值|\"TH1 TL1\"|\"0x00 0x00\"|计数器（定时器）1从0开始进行计数，计数到256时溢出，触发计数器1中断，从而得到128ms 中断优先级寄存器|IP|0x01|中断优先级设置:全帧遥测数据接口帧同步中断为高优先级, 其余低优先级 P1口|P1_4|1|选择主份TM P1口|P1_0|1|清狗电平 内部RAM|0x00~0xFF|0x00|上电后将内部RAM初始化为0  （2）软件变量初始化 软件变量初始化时，先将32KB外部RAM初始化为0，之后将非零变量显示初始化。帆板初始状态为正向复位，部件状态为不加电，推力器采用A分支，部件故障诊断不允许。 （3）ASIC芯片初始化 按照任务书、以及硬件技术说明书对ASIC芯片进行初始化，主要涉及GPIO口、GC计数器、GT定时器，同步串口等。 （4）1553B初始化 详见5.2.9.1节 FReq-9。 初始化完成后，允许总中断、T1(128ms)定时器中断、外部中断0，并启动T1。",
    "LLM inference": "['Init CR.IE {0x00};', 'Init CR.TCON {0x05};', 'Init CR.TMOD {0x61};', 'Init CR.TH1_TL1 {0x00,0x00};', 'Init CR.IP {0x01};', 'Init CR.P1_4 {1};', 'Init CR.P1_0 {1};', 'Init OBDH.RAM {0x00};', 'Init 1553B.BC_Config {0xA5};', 'Init CR.TCON {true};']",
    "LLM total answer": "```json\n{\n  \"BNF Grammar\": {\n    \"<OperationalStmt>\": \"<TimeConstraint>? <AutomicFunc> <CapabilitySpec>? <TimeConsDef>? ';'\",\n    \"<AutomicFunc>\": \"<InitFunc> | <GetDataFunc> | <SendDataFunc> | <ComputeFunc> | <ProTMFunc> | <ProTCFunc>\",\n    \"<InitFunc>\": \"'Init' <PortName> <Config>\",\n    \"<PortName>\": \"<Identifier> '.' <Identifier>\",\n    \"<Config>\": \"'{' <LiteralList> '}'\",\n    \"<LiteralList>\": \"<Literal> (',' <Literal>)*\",\n    \"<Literal>\": \"<Number> | <Decimal> | <BoolConst> | <HexConst> | <BinConst> | <StringConst> | <Time>\"\n  },\n  \"Device Library\": {\n    \"CR\": \"控制寄存器\",\n    \"1553B\": \"1553B芯片\",\n    \"OBDH\": \"数管计算机\"\n  },\n  \"Data Dictionary\": {\n    \"IE\": \"中断使能寄存器\",\n    \"TCON\": \"计时器控制寄存器\",\n    \"TMOD\": \"计时器模式寄存器\",\n    \"TH1\": \"定时器1初值高字节\",\n    \"TL1\": \"定时器1初值低字节\",\n    \"IP\": \"中断优先级寄存器\",\n    \"P1_4\": \"P1口主份TM选择\",\n    \"P1_0\": \"清狗电平\",\n    \"RAM\": \"内部RAM地址空间\"\n  },\n  \"Output DSL\": [\n    \"Init CR.IE {0x00};\",\n    \"Init CR.TCON {0x05};\",\n    \"Init CR.TMOD {0x61};\",\n    \"Init CR.TH1_TL1 {0x00,0x00};\",\n    \"Init CR.IP {0x01};\",\n    \"Init CR.P1_4 {1};\",\n    \"Init CR.P1_0 {1};\",\n    \"Init OBDH.RAM {0x00};\",\n    \"Init 1553B.BC_Config {0xA5};\",\n    \"Init CR.TCON {true};\"\n  ]\n}\n```"
  },
  {
    "Requirement": "功能描述：搜索并捕获太阳，完成并保持帆板对太阳定向",
    "LLM inference": "In [0ms, 500ms] AttCtrl {attiangT, attirateT, currentmode} {AttigDss[2], viewCode} Finished Within 5s;",
    "LLM total answer": "```json\n{\n  \"BNF Grammar\": {\n    \"OperationalStmt\": \"<TimeConstraint>? <AutomicFunc> <CapabilitySpec>? <TimeConsDef>? ';'\",\n    \"AutomicFunc\": \"<ComputeFunc>\",\n    \"ComputeFunc\": \"<ComputeType> <OutputData> <InputData>\",\n    \"ComputeType\": \"'AttCtrl'\",\n    \"OutputData\": \"{'attiangT', 'attirateT', 'currentmode'}\",\n    \"InputData\": \"{'AttigDss[2]', 'viewCode'}\",\n    \"TimeConsDef\": \"'Finished' 'Within' <Time>\"\n  },\n  \"Device Library\": {\n    \"Sensor\": [\"DSS\"],\n    \"Controller\": [\"AOCC\"]\n  },\n  \"Data Dictionary\": {\n    \"AttigDss[2]\": \"太阳敏感器采集的姿态角度\",\n    \"viewCode\": \"太阳可见标志\",\n    \"attiangT\": \"目标角度\",\n    \"attirateT\": \"目标角速度\",\n    \"currentmode\": \"工作模式字\"\n  },\n  \"Output DSL\": \"In [0ms, 500ms] AttCtrl {attiangT, attirateT, currentmode} {AttigDss[2], viewCode} Finished Within 5s;\"\n}\n```"
  },
  {
    "Requirement": "功能描述：减小卫星的俯仰角。 输入：陀螺数据输出 ， 红外数据有效性标志F_IresValid（由有效性判据给出）、见太阳状态、故障标志IRES_FLAG 红外弦宽 红外数据处理（全姿态捕获）的输出，",
    "LLM inference": "AttCtrl pulseWidth {deltG[9], F_IresValid, viewCode, IRES_FLAG, infraredWidth, infraredProcessOutput};",
    "LLM total answer": "```json\n{\n  \"BNF Grammar\": {\n    \"<OperationalStmt>\": \"<AutomicFunc> ';'\",\n    \"<AutomicFunc>\": \"<ComputeFunc>\",\n    \"<ComputeFunc>\": \"<ComputeType> <OutputData> <InputData>\",\n    \"<ComputeType>\": \"'AttCtrl'\",\n    \"<OutputData>\": \"<Identifier>\",\n    \"<InputData>\": \"'{' <IdentifierList> '}'\",\n    \"<IdentifierList>\": \"<Identifier> (',' <Identifier>)*\",\n    \"<Identifier>\": \"[a-zA-Z_] [a-zA-Z0-9_]* ('[' <Number> ']')?\"\n  },\n  \"Device Library\": [],\n  \"Data Dictionary\": [\n    \"pulseWidth\",\n    \"deltG[9]\",\n    \"viewCode\"\n  ],\n  \"Output DSL\": \"AttCtrl pulseWidth {deltG[9], F_IresValid, viewCode, IRES_FLAG, infraredWidth, infraredProcessOutput};\"\n}\n```"
  },
  {
    "Requirement": "功能描述：复位未取回重要数据初始化 处理： - 卫星构型=9； - 对系统软件提供的工作模式字APP_WorkMode进行3取2 - 若工作模式字为Mode7-11，切换至Mode16，SubMode1，StarTime= 2100.0， 开自锁阀3、4、5； - 否则，切换至Mode2，StarTime = 2100.0， 开自锁阀3、5，关自锁阀4。 - 磁力矩器俯仰通道主份工作； - 陀螺：陀螺引入状态初始化",
    "LLM inference": "[ERROR] Output DSL not found",
    "LLM total answer": "```json\n{\n  \"BNF Grammar\": {\n    \"<OperationalStmt>\": \"包含原子功能操作和时间约束的定义\",\n    \"<AutomicFunc>\": \"包含初始化/数据获取/计算等功能类型\",\n    \"<InitFunc>\": \"设备端口初始化操作\",\n    \"<ComputeFunc>\": \"模式切换计算功能\",\n    \"<ProTCFunc>\": \"推力器控制操作\",\n    \"<SwitchMode>\": \"特定计算类型-模式切换\",\n    \"<Config>\": \"初始化配置参数结构\",\n    \"<LiteralList>\": \"初始化参数列表\"\n  },\n  \"Device Library\": {\n    \"CR\": \"控制寄存器\",\n    \"OBDH\": \"数管计算机\",\n    \"mwSys\": \"动量轮\",\n    \"Gyro3F\": \"三浮陀螺\",\n    \"ascBoxCtrl\": \"上升器推进线路盒\",\n    \"lanBoxCtrl\": \"着陆器推进线路盒\"\n  },\n  \"Data Dictionary\": {\n    \"currentmode\": \"工作模式字\",\n    \"stellarTime\": \"星时\",\n    \"JetPowerState\": \"推力器加电状态\",\n    \"GyroPowerState[9]\": \"陀螺加电状态数组\"\n  },\n  \"Output DSL\": \"Init OBDH.CR {9};\\n\"\n               \"Compute SwitchMode currentmode {\\n\"\n               \"  If currentmode in [7,8,9,10,11] Then\\n\"\n               \"    Init OBDH.CR {Mode16, SubMode1, 2100.0};\\n\"\n               \"    ProTC ascBoxCtrl {JetPowerState3, JetPowerState4, JetPowerState5};\\n\"\n               \"  Else\\n\"\n               \"    Init OBDH.CR {Mode2, 2100.0};\\n\"\n               \"    ProTC lanBoxCtrl {JetPowerState3, JetPowerState5};\\n\"\n               \"    ProTC lanBoxCtrl {!JetPowerState4};\\n\"\n               \"};\\n\"\n               \"ProTM mwSys {RASM};\\n\"\n               \"Init Gyro3F.power {GyroPowerState[0..8]=false};\"\n}\n```"
  },
  {
    "Requirement": "功能描述：计算偏置动量模式下滚动/偏航轴进动控制及章动阻尼所需的磁力矩器脉宽。                                                                                                                                                                                                                                                                                                                                                           输入： Y轴角动量偏差     滚动角，滚动角速度，偏航角，偏航角速度 地磁场强度（T） ，及标量B，星下点经纬度L, 输出：磁力矩器工作脉宽，",
    "LLM inference": "AttCtrl {pulseWidth} {Y轴角动量偏差,滚动角,滚动角速度,偏航角,偏航角速度,T,B,L};",
    "LLM total answer": "```json\n{\n  \"BNF Grammar\": {\n    \"OperationalStmt\": \"<TimeConstraint>? <AutomicFunc> <CapabilitySpec>? <TimeConsDef>? ';'\",\n    \"AutomicFunc\": \"<ComputeFunc>\",\n    \"ComputeFunc\": \"<ComputeType> <OutputData> <InputData>\",\n    \"ComputeType\": \"'AttCtrl'\",\n    \"OutputData\": \"'{' <IdentifierList> '}'\",\n    \"InputData\": \"'{' <IdentifierList> '}'\",\n    \"IdentifierList\": \"<Identifier> (',' <Identifier>)*\"\n  },\n  \"Device Library\": {\n    \"Actuator\": \"磁力矩器(未在库中需补充)\"\n  },\n  \"Data Dictionary\": {\n    \"Input\": \"Y轴角动量偏差,滚动角,滚动角速度,偏航角,偏航角速度,T,B,L\",\n    \"Output\": \"pulseWidth\"\n  },\n  \"Output DSL\": \"AttCtrl {pulseWidth} {Y轴角动量偏差,滚动角,滚动角速度,偏航角,偏航角速度,T,B,L};\"\n}\n```"
  },
  {
    "Requirement": "功能描述：中继天线数据处理 处理： 处理数据时应对接收数据中的捕跟分系统工作模式进行保护判断。",
    "LLM inference": "ProTM relayAntenna {currentmode};",
    "LLM total answer": "```json\n{\n  \"BNF Grammar\": {\n    \"<OperationalStmt>\": \"<TimeConstraint>? <AutomicFunc> <CapabilitySpec>? <TimeConsDef>? ';'\",\n    \"<AutomicFunc>\": \"<InitFunc> | <GetDataFunc> | <SendDataFunc> | <ComputeFunc> | <ProTMFunc> | <ProTCFunc>\",\n    \"<ProTMFunc>\": \"'ProTM' <DeviceName> '{' <DataSet> '}'\",\n    \"<DeviceName>\": \"<Identifier>\",\n    \"<DataSet>\": \"<Identifier> (',' <Identifier>)*\"\n  },\n  \"Device Library\": {\n    \"relayAntenna\": \"中继天线\"\n  },\n  \"Data Dictionary\": {\n    \"currentmode\": \"捕跟分系统工作模式\"\n  },\n  \"Output DSL\": \"ProTM relayAntenna {currentmode};\"\n}\n```"
  },
  {
    "Requirement": "功能描述：若3000秒（全姿态捕获除速率阻尼外1000秒，可注入修改）内，三轴中任一轴喷气总量（正负轴单独判断）超过范围（正常模式50s，粗定向和轮子启动、偏置动量、全姿态捕获除速率阻尼100s，可注入修改），则根据自锁阀状态，开关",
    "LLM inference": "Over(3000s, nc, 1) Diagnose jetPower {currentmode, JetPowerState} ReqCapByFormula thresholdCondition;",
    "LLM total answer": "```json\n{\n  \"BNF Grammar\": {\n    \"OperationalStmt\": \"<TimeConstraint>? <AutomicFunc> <CapabilitySpec>? <TimeConsDef>? ';'\",\n    \"AutomicFunc\": \"<ComputeFunc>\",\n    \"ComputeFunc\": \"<ComputeType> <OutputData> <InputData>\",\n    \"ComputeType\": \"'Diagnose'\",\n    \"TimeConstraint\": \"<OverConstraint>\",\n    \"OverConstraint\": \"'Over' '(' <Time> ',' ('nc') ',' <Number> ')'\",\n    \"CapabilitySpec\": \"'ReqCapByFormula' <Identifier>\",\n    \"OutputData\": \"<Identifier>\",\n    \"InputData\": \"'{' <IdentifierList> '}'\",\n    \"IdentifierList\": \"<Identifier> (',' <Identifier>)*\"\n  },\n  \"Device Library\": {\n    \"JET\": \"推力器\",\n    \"AOCC\": \"中央控制单元\"\n  },\n  \"Data Dictionary\": {\n    \"currentmode\": \"工作模式字\",\n    \"JetPowerState\": \"推力器加电状态\",\n    \"jetPower\": \"推力器开关信号\"\n  },\n  \"Output DSL\": \"Over(3000s, nc, 1) Diagnose jetPower {currentmode, JetPowerState} ReqCapByFormula thresholdCondition;\"\n}\n```"
  },
  {
    "Requirement": "需求名称|功能及处理描述 对地数传天线1数据的采集与处理|在总线指令要求通讯允许的条件下，每500ms向对地数传天线1 LTU发控制指令，获得对地数传天线1数据并处理成对应的角度等信息。 对地数传天线2数据的采集与处理|对地数传天线2的角度和角度偏差|在总线指令要求通讯允许的条件下，每500ms向对地数传天线2 LTU发控制指令，获得对地数传天线2数据并处理成对应的角度等信息。 中继天线数据的采集与处理|在总线指令要求通讯允许的条件下，每500ms向中继天线 LTU发控制指令，获得中继天线数据并处理成对应的角度等信息。",
    "LLM inference": "['Over(500ms, nc, 0) ProTC datatransAntenna1 {attiang, attimombias} ReqCapByTable currentmode Finished Within 500ms;', 'Over(500ms, nc, 0) ProTC datatransAntenna2 {attiang, attimombias} ReqCapByTable currentmode Finished Within 500ms;', 'Over(500ms, nc, 0) ProTC relayAntenna {attiang, attimombias} ReqCapByTable currentmode Finished Within 500ms;']",
    "LLM total answer": "```json\n{\n  \"BNF Grammar\": {\n    \"<OperationalStmt>\": \"<TimeConstraint>? <AutomicFunc> <CapabilitySpec>? <TimeConsDef>? ';'\",\n    \"<AutomicFunc>\": \"<InitFunc> | <GetDataFunc> | <SendDataFunc> | <ComputeFunc> | <ProTMFunc> | <ProTCFunc>\",\n    \"<ProTCFunc>\": \"'ProTC' <DeviceName> '{' <DataSet> '}'\",\n    \"<TimeConstraint>\": \"<OverConstraint>\",\n    \"<OverConstraint>\": \"'Over' '(' <Time> ',' ('c' | 'nc') ',' <Number> ')'\",\n    \"<CapabilitySpec>\": \"'ReqCapByTable' <Identifier>\",\n    \"<TimeConsDef>\": \"'Finished' 'Within' <Time>\",\n    \"<DeviceName>\": \"<Identifier>\",\n    \"<DataSet>\": \"<Identifier> (',' <Identifier>)*\",\n    \"<Time>\": \"<Number> 'ms'\",\n    \"<Number>\": \"500\"\n  },\n  \"Device Library\": {\n    \"datatransAntenna1\": \"对地数传天线1\",\n    \"datatransAntenna2\": \"对地数传天线2\",\n    \"relayAntenna\": \"中继天线\",\n    \"Bus\": \"总线\"\n  },\n  \"Data Dictionary\": {\n    \"attiang\": \"三轴姿态角\",\n    \"attimombias\": \"三轴姿态角偏差\",\n    \"currentmode\": \"工作模式字\"\n  },\n  \"Output DSL\": [\n    \"Over(500ms, nc, 0) ProTC datatransAntenna1 {attiang, attimombias} ReqCapByTable currentmode Finished Within 500ms;\",\n    \"Over(500ms, nc, 0) ProTC datatransAntenna2 {attiang, attimombias} ReqCapByTable currentmode Finished Within 500ms;\",\n    \"Over(500ms, nc, 0) ProTC relayAntenna {attiang, attimombias} ReqCapByTable currentmode Finished Within 500ms;\"\n  ]\n}\n```"
  },
  {
    "Requirement": "功能描述：三轴稳定模式下，检测系统故障。 处理： （1）基本处理 将系统故障打分FSY限幅到[7，]。 （2）FSY加减分 条件|FSY的处理 （红外输出有效），ZT3≠C(用星敏感器+陀螺定姿，且接入控制回路)，ZT3≠A(星敏无陀螺定姿，且接入控制回路，整星零动量控制方式)，|FSY加一分 （红外输出有效），ZT3≠C(用星敏感器+陀螺定姿，且接入控制回路)，ZT3≠A(星敏无陀螺定姿，且接入控制回路，整星零动量控制方式),{或}|FSY减一分 （红外输出有效），ZT3=C(用星敏感器+陀螺定姿，且接入控制回路)或ZT3=A(星敏无陀螺定姿，且接入控制回路，整星零动量控制方式)，|FSY加一分 （红外输出有效），ZT3=C(用星敏感器+陀螺定姿，且接入控制回路)或ZT3=A(星敏无陀螺定姿，且接入控制回路，整星零动量控制方式),{，}|FSY减一分 或或，FGF=1|FSY减一分 或或，FGF≠1|FSY减4分 ，FSTD>1，且{（且）或ZT5=0}|FSY加4分  处理FSY,ZT3,AttTurnFlag和 条件|FSY的处理 C，A，BZ5连续239次为0|FSY=1 ，FSTD连续954次为1,ZT5=0|FSY=1 ，FSTD连续954次为1,|\"FSY= ZT3=3,；AttTurnFlag=1\" A，FSTD连续250次为1|FSY=1 ，FSTD≠1|AttTurnFlag=0 FSY≤64H,ZT3=C,ZT5≠0|\"FSY= ZT3=3,；AttTurnFlag=1\" ，AttTurnFlag=1，ZT41[2]=1允许自主由红外转回星敏定姿时，若连续120次(且，且)|，AttTurnFlag=0  (4) 若ZT226，FSY07，ZT8 =F，ZT9 =F，则ZT8=0,ZT9=0,BZ7=Jeti2。 （5）根据FSY的结果和ZT22、ZT8、ZT9对BZ1进行处理 条件|BZ1的处理 ZT226，FSY07且ZT8  3，ZT9  3|BZ1 = 3 ZT226，FSY07且ZT8  4或ZT9  4|BZ1 = 7  （6）根据FSY的结果和ZT22、ZT8、ZT9以及BZ7重置BZ7 条件|BZ7的处理 ZT226，FSY07且ZT8 = 0（可自主切换主备份姿控发动机），BZ7=1（可用姿轨控主份推力器）|BZ7 = 2 ZT226，FSY07且ZT8 = 0，BZ7=3（可用姿轨控主份及备份推力器）|BZ7 = 2 ZT226，FSY07且ZT8 = 0，BZ7=2（可用姿轨控备份推力器）|BZ7 = 1  （7）若ZT226，FSY07，ZT43[4]=1允许自主给陀螺加电，则陀螺自主加电。 （8）若ZT226，FSY07，ZT44[4]=0，FlagWHCtl=A或ZT3=B，则FlagWHCtl=5;ZT3=3;ZT8=0;BZ7=Jeti;陀螺漂移赋值；Ix,Iy,Iz,Ihx,Ihz清0。 （9）指定FlagAttTurnIres=0后，系统不使用红外进行姿态监视，仅根据有效红外进行姿态修正。",
    "LLM inference": "Diagnose {FSY, ZT3, AttTurnFlag, BZ1, BZ7, JetPowerState, GyroPowerState[9], FlagWHCtl, Ix, Iy, Iz, Ihx, Ihz, FlagAttTurnIres} {FSY, ZT3, AttTurnFlag, FGF, FSTD, ZT5, ZT22, ZT8, ZT9, BZ7, ZT43[4], ZT44[4]} ReqCapByFormula FSY_Processing;",
    "LLM total answer": "```json\n{\n  \"BNF Grammar\": {\n    \"OperationalStmt\": \"<TimeConstraint>? <AutomicFunc> <CapabilitySpec>? <TimeConsDef>? ';'\",\n    \"AutomicFunc\": \"<ComputeFunc>\",\n    \"ComputeFunc\": \"<ComputeType> <OutputData> <InputData>\",\n    \"ComputeType\": \"'Diagnose'\",\n    \"OutputData\": \"'{' <IdentifierList> '}'\",\n    \"InputData\": \"'{' <IdentifierList> '}'\",\n    \"CapabilitySpec\": \"'ReqCapByFormula' <Identifier>\"\n  },\n  \"Device Library\": {\n    \"Gyro\": \"三浮陀螺(Gyro3F)\",\n    \"Thruster\": \"推力器(JET)\"\n  },\n  \"Data Dictionary\": {\n    \"FSY\": \"系统故障打分\",\n    \"ZT3\": \"定姿模式状态字\",\n    \"AttTurnFlag\": \"姿态转换标志\",\n    \"FGF\": \"故障标志位\",\n    \"FSTD\": \"故障状态标志\",\n    \"ZT5\": \"姿态控制模式字\",\n    \"ZT22\": \"系统状态字\",\n    \"ZT8\": \"推力器主备份状态\",\n    \"ZT9\": \"推力器备份状态\",\n    \"BZ1\": \"控制策略选择字\",\n    \"BZ7\": \"推力器使用策略字\",\n    \"ZT43[4]\": \"陀螺自主加电允许标志\",\n    \"ZT44[4]\": \"陀螺控制模式标志\",\n    \"FlagWHCtl\": \"动量轮控制标志\",\n    \"Ix,Iy,Iz,Ihx,Ihz\": \"惯量参数\",\n    \"FlagAttTurnIres\": \"红外姿态转换标志\"\n  },\n  \"Output DSL\": \"Diagnose {FSY, ZT3, AttTurnFlag, BZ1, BZ7, JetPowerState, GyroPowerState[9], FlagWHCtl, Ix, Iy, Iz, Ihx, Ihz, FlagAttTurnIres} {FSY, ZT3, AttTurnFlag, FGF, FSTD, ZT5, ZT22, ZT8, ZT9, BZ7, ZT43[4], ZT44[4]} ReqCapByFormula FSY_Processing;\"\n}\n```"
  },
  {
    "Requirement": "功能描述：利用星敏感器B的测量，修正姿态四元数与估计角速度。",
    "LLM inference": "DetAtt {attiquaternion, estimatedRate} {SSB_measurement};",
    "LLM total answer": "```json\n{\n  \"BNF Grammar\": {\n    \"<OperationalStmt>\": \"<AutomicFunc> ';'\",\n    \"<AutomicFunc>\": \"<ComputeFunc>\",\n    \"<ComputeFunc>\": \"<ComputeType> <OutputData> <InputData>\",\n    \"<ComputeType>\": \"'DetAtt'\",\n    \"<OutputData>\": \"'{' <IdentifierList> '}'\",\n    \"<InputData>\": \"'{' <IdentifierList> '}'\",\n    \"<IdentifierList>\": \"<Identifier> (',' <Identifier>)*\"\n  },\n  \"Device Library\": {\n    \"Sensor\": [\"SSB\"]\n  },\n  \"Data Dictionary\": {\n    \"attiquaternion\": \"姿态四元数\",\n    \"estimatedRate\": \"估计角速度\",\n    \"SSB_measurement\": \"星敏感器B姿态测量值\"\n  },\n  \"Output DSL\": \"DetAtt {attiquaternion, estimatedRate} {SSB_measurement};\"\n}\n```"
  },
  {
    "Requirement": "功能描述：使星体Z轴捕获太阳。 处理过程： STEP1:帆板归零 STEP2:若FSA=0太阳未捕获且ZT13≠4不用数字太阳捕获，则使用0-1太阳敏感器进行捕获。公式见（2） STEP3:若FSA=0太阳未捕获且ZT13=4用数字太阳捕获，则使用数字太阳敏感器进行捕获，直至两个数字太阳都见太阳，置FSA=5初捕获。公式见（3） STEP4：当ZT43[4]=1允许陀螺自主加电且FlagGyroAdd=1正在给陀螺加电时，设置FSA=0。若FSA=0，则调用速率喷气控制。 STEP5:若ZT2=2飞轮整星零动量控制模式，且工作飞轮的分数都不小于12分，则调用飞轮动量保持控制及飞轮启动。 STRP6:若ZT2≠2或出现工作飞轮的分数小于12分，则6个飞轮的输出电压都置0。",
    "LLM inference": "['Init CR.Port {0};', 'SwitchMode currentmode {RDSM} {viewCode};', 'ProTC CR {currentmode=5} ReqCapByFormula CaptureFormula1;', 'AttCtrl JET {jetPower} {GyroPowerState[9]} Finished Within 100ms;', 'ProTM mwSys {0,0,0,0,0,0};']",
    "LLM total answer": "```json\n{\n  \"BNF Grammar\": {\n    \"<OperationalStmt>\": \"<TimeConstraint>? <AutomicFunc> <CapabilitySpec>? <TimeConsDef>? ';'\",\n    \"<AutomicFunc>\": \"<InitFunc> | <ComputeFunc> | <ProTMFunc> | <ProTCFunc>\",\n    \"<InitFunc>\": \"'Init' <PortName> <Config>\",\n    \"<ComputeFunc>\": \"<ComputeType> <OutputData> <InputData>\",\n    \"<ProTMFunc>\": \"'ProTM' <DeviceName> '{' <DataSet> '}'\",\n    \"<ProTCFunc>\": \"'ProTC' <DeviceName> '{' <DataSet> '}'\",\n    \"<ComputeType>\": \"'SwitchMode' | 'AttCtrl'\",\n    \"<Config>\": \"'{' <LiteralList> '}'\"\n  },\n  \"Device Library\": {\n    \"Sensor\": [\"DSS\"],\n    \"Actuator\": [\"JET\", \"CR\", \"mwSys\"],\n    \"Controller\": [\"AOCC\"]\n  },\n  \"Data Dictionary\": {\n    \"currentmode\": \"工作模式字\",\n    \"jetPower\": \"推力器开关信号\",\n    \"GyroPowerState[9]\": \"陀螺加电状态\",\n    \"RDSM\": \"速率阻尼\"\n  },\n  \"Output DSL\": [\n    \"Init CR.Port {0};\",\n    \"SwitchMode currentmode {RDSM} {viewCode};\",\n    \"ProTC CR {currentmode=5} ReqCapByFormula CaptureFormula1;\",\n    \"AttCtrl JET {jetPower} {GyroPowerState[9]} Finished Within 100ms;\",\n    \"ProTM mwSys {0,0,0,0,0,0};\"\n  ]\n}\n```"
  },
  {
    "Requirement": "功能描述：地面站赤经赤纬计算 处理：同用户需求的",
    "LLM inference": "DetAtt {attiangT} {AttigDss[2], timeCode, stellarTime};",
    "LLM total answer": "```json\n{\n  \"BNF Grammar\": {\n    \"<OperationalStmt>\": \"<AutomicFunc> ';'\",\n    \"<AutomicFunc>\": \"<ComputeFunc>\",\n    \"<ComputeFunc>\": \"<ComputeType> <OutputData> <InputData>\",\n    \"<ComputeType>\": \"'DetAtt'\",\n    \"<OutputData>\": \"'{' <IdentifierList> '}'\",\n    \"<InputData>\": \"'{' <IdentifierList> '}'\",\n    \"<IdentifierList>\": \"<Identifier> (',' <Identifier>)*\",\n    \"<Identifier>\": \"[a-zA-Z_] [a-zA-Z0-9_]* ('[' <Number> ']')?\"\n  },\n  \"Device Library\": \"None\",\n  \"Data Dictionary\": [\n    \"attiangT\",\n    \"AttigDss[2]\",\n    \"timeCode\",\n    \"stellarTime\"\n  ],\n  \"Output DSL\": \"DetAtt {attiangT} {AttigDss[2], timeCode, stellarTime};\"\n}\n```"
  },
  {
    "Requirement": "功能描述：  从1553B接收遥控指令数据，进行指令处理（FReq-7）。 处理：根据收到的遥控指令执行按照、ISUA、ISUC进行分类处理，实现指令的处理或者转发。 指令转发前，进行指令的校验，校验通过后，方可转发。指令子单元的分类标识全为立即指令。 指令校验的原则是：校验和、RT地址、RT子地址、指令总长度、注入指令单元的类型识别字、指令序号、注入指令子单元的子单元类型识别字、分类标识、长度均正确； 遥控指令包含三种类型，具体如下： （1） 切换ISU-C模块指令 指令功能：用于向ISU-C发送切换模块指令。 类型标识字：C300H 指令码长度：216bit 指令码定义及说明：指令码高有效字在前，指令码低有效字在后。 ISU-C注入间接指令32位指令码定义 序号|指令名称|32位指令码 序号|指令名称|功能数据 序号|指令名称|D23～D0（16进制表示） 序号|指令名称|D11～D0 |SADP-A开|0X 000 |SADP-A关|0X 001 |SADP-B开|0X 002 |SADP-B关|0X 003 |MTP-A开|0X 004 |MTP-A关|0X 005 |MTP-B开|0X 006 |MTP-B关|0X 007 |MPSDP-A接A份电源|0X 008 |MPSDP-A接B份电源|0X 009 |MPSDP-B接A份电源|0X 00A |MPSDP-B接B份电源|0X 00B |MPSDP-A关|0X 00C |MPSDP-B关|0X 00D |LV1开|0X 00E |LV1关|0X 00F |LV2开|0X 010 |LV2关|0X 011 |ISU-A DC/DC1加电|0X 012 |ISU-A DC/DC1断电|0X 013 |ISU-A DC/DC2加电|0X 014 |ISU-A DC/DC2断电|0X 015 |ISU-A 主供电接DC/DC1备供电接DC/DC2|0X 016 |ISU-A 主供电接DC/DC2备供电接DC/DC1|0X 017 |ISU-A甲机复位|0X 018 |ISU-A乙机复位|0X 019  类别：01代表指令当量为16ms；10代表指令当量为64ms，MEO卫星指令类型全为01。 脉宽：指令实际脉冲宽度=（脉宽数值+1）*指令当量； MEO卫星离散开关指令脉冲宽度默认为7（128ms）；指令宽度可随实际需要更改。 指令码高有效字对应上表D31~D16；指令码低有效字对应上表D15~D0。 （2） 切换控制部件指令 指令功能：用于向ISU-A发送切换控制部件指令。 类型标识字：C311H 指令码长度：116bit 指令码定义及说明： 定义 D7~D0 指令码  此指令专门用于CMU应用软件转发的开关控制分系统部件的时标指令。文中的8位指令码定义如下： 表4-8 ISU-A注入间接指令码列表 序号|指令名称|指令码 |地球敏感器A开|0x 50 |地球敏感器A关|0x 4F |地球敏感器B开|0x 52 |地球敏感器B关|0x 51 |Z2陀螺开|0x 31 |Z2陀螺关|0x 32 |Z3陀螺开|0x 33 |Z3陀螺关|0x 34 |GX电源开|0x 35 |GX电源关|0x 36 |GY电源开|0x 37 |GY电源关|0x 38 |GZ电源开|0x 39 |GZ电源关|0x 3A |GS电源开|0x 3B |GS电源关|0x 3C |反作用轮A开|0x 2E |反作用轮A关|0x 2F |反作用轮B开|0x 49 |反作用轮B关|0x 4A |反作用轮C开|0x 4B |反作用轮C关|0x 4C |反作用轮D开|0x 4D |反作用轮D关|0x 4E |ISU-C 驱动线路主份电源开|0x 67 |ISU-C 驱动线路主份电源关|0x 68 |ISU-C 驱动线路备份电源开|0x 61 |ISU-C 驱动线路备份电源关|0x 62 |ISU-C CIP主份线路电源开|0x 65 |ISU-C CIP主份线路电源关|0x 66 |ISU-C CIP备份线路电源开|0x 63 |ISU-C CIP备份线路电源关|0x 64 |CMU SPE-A开|0x 57 |CMU SPE-A关|0x 58 |CMU SPE-B开|0x 59 |CMU SPE-B关|0x 5A  说明：此36条指令脉宽均为128ms，脉宽由ISUA保证。 （3） 控制模式转换指令 指令功能：此指令用于控制模式转换。 类型标识字：C322H 指令码长度：116 指令码定义及说明： 指令码|定义 方式字|定义 00H|捕获模式——速率阻尼方式 04H|停控模式  （4） 5N推力器健康状态设置指令 指令功能：设置5N推力器健康状态 类型标识字：C333H 指令码长度：216 指令码定义及说明： 推力器健康状态设置高16位D31~D16在前， 推力器健康状态设置低16位D15~D0在后。 D31~ D0定义如下： D31|D30|D29|D28|D27|D26|D25|D24 0|0|0|0|0|0|0|0 D23|D22|D21|D20|D19|D18|D17|D16 0|0|JK-6A|JK-5A|JK-4A|JK-3A|JK-2A|JK-1A D15|D14|D13|D12|D11|D10|D9|D8 0|0|0|0|0|0|0|0 D7|D6|D5|D4|D3|D2|D1|D0 0|0|JK-6B|JK-5B|JK-4B|JK-3B|JK-2B|JK-1B  注：健康标志位为0表示对应推力器健康，健康标志位为1表示对应推力器不健康。将推力器设置为健康，可以使其上线；将推力器设为不健康，可以使其离线。推力器上线后方可被开启，推力器离线后不能被开启。当接收到此指令时，须同时把上述信息以MPS配置信息的形式发送给ISU-C（通过DPRU转发）。 （5） 控制部件健康字设置指令 指令功能：更改部件健康字 类型标识字：C344H 指令码长度：216 指令码定义及说明： 设置状态在前，部件标识在后。 设置状态：取值为0x0000时设置为健康，取值为0x5A5A时设置为不健康； 部件名称及标识见下表分配值：特别当编号为0xFFFF时，表示选择下表所有部件。例如，当设置状态为0x0000，部件编号为0xFFFF时，设置下表所有部件健康。 序号|部件名称|标识|部件编号 1|X陀螺|GA-X|0x0101 2|Y陀螺|GA-Y|0x0202  3|Z陀螺|GA-Z|0x0303  4|S陀螺|GA-S|0x0404  5|喷气控制线路主份|MPSDP-A|0x0707  6|喷气控制线路备份|MPSDP-B|0x0808   (6) 控制标志字设置指令 指令功能：设置部件或者控制标志字\t 类型标识字：C355H 指令码长度：216 指令码定义及说明：  标志字识别码在前，标志字指令内容在后。 更改的标志字的内容16位二进制码，具体内容定义： 序号|标志字识别码|指令内容定义|对应符号 标志字1|0x0101|\"0：S陀螺顶替X陀螺； 1：S陀螺顶替Y陀螺；   2：S陀螺顶替Z陀螺； 3：禁止顶替。\"| 标志字2|0x0202|\"0：A分支推力器工作； 1：B分支推力器工作；   2：双分支推力器工作。\"| 标志字3|0x0303|\"0：不允许推力器故障判断； A：允许推力器故障判断。\"| 标志字4|0x0404|\"0：不允许二浮陀螺故障判断； A：允许二浮陀螺故障判断。\"| 标志字5|0x0505|\"0：设置推力器未发生切换； A：设置推力器已发生切换。\"|任务书中推力器故障诊断中的 flgSwitch",
    "LLM inference": "ProTC 1553B {C300H, C311H, C322H, C333H, C344H, C355H};",
    "LLM total answer": "```json\n{\n  \"BNF Grammar\": {\n    \"OperationalStmt\": \"<AutomicFunc> ';'\",\n    \"AutomicFunc\": \"<ProTCFunc>\",\n    \"ProTCFunc\": \"'ProTC' <DeviceName> '{' <DataSet> '}'\",\n    \"DeviceName\": \"<Identifier>\",\n    \"DataSet\": \"<Identifier> (',' <Identifier>)*\",\n    \"Identifier\": \"[a-zA-Z_] [a-zA-Z0-9_]*\"\n  },\n  \"Device Library\": [\"1553B\"],\n  \"Data Dictionary\": [\"C300H\", \"C311H\", \"C322H\", \"C333H\", \"C344H\", \"C355H\"],\n  \"Output DSL\": \"ProTC 1553B {C300H, C311H, C322H, C333H, C344H, C355H};\"\n}\n```"
  },
  {
    "Requirement": "计算机上电/复位后应用软件的工作流程如下。 图5-1应用软件初始化和复位处理流程",
    "LLM inference": "After (0s) Init OBDH.boot {true};",
    "LLM total answer": "```json\n{\n  \"BNF Grammar\": {\n    \"<OperationalStmt>\": \"<TimeConstraint>? <AutomicFunc> <CapabilitySpec>? <TimeConsDef>? ';'\",\n    \"<AutomicFunc>\": \"<InitFunc> | <GetDataFunc> | <SendDataFunc> | <ComputeFunc> | <ProTMFunc> | <ProTCFunc>\",\n    \"<InitFunc>\": \"'Init' <PortName> <Config>\"\n  },\n  \"Device Library\": {\n    \"DeviceSet\": [\"OBDH\"]\n  },\n  \"Data Dictionary\": {\n    \"DataSet\": []\n  },\n  \"Output DSL\": {\n    \"DSL code\": \"After (0s) Init OBDH.boot {true};\"\n  }\n}\n```"
  },
  {
    "Requirement": "功能描述：采集星上时钟的计数值，计算星时及作相应的处理 处理：包括CPU内部星时时钟和CPU外部星时时钟的星时采集计算与校时。。 （1）CPU外部星时时钟的星时采集计算与校时 CPU外部星时时钟星时计算的输入为上一个周期对应的绝对星时t，和上个周期中控制周期星时锁存寄存器中读取的计数值为TOLD。在每个控制周期中处理过程如下： STEP1：选取控制周期星时锁存通道，读取锁存的计算值，记为TNEW； STEP2：计算TNEW减去TOLD的差值，记为DELTT（当量为1微秒）； STEP3：本周期的绝对星时t=t+DELTT/1000000； STEP4：保存本周期的计数值，即TOLD=TNEW。 CPU外部星时时钟星时校时包括OBDH校时和GPS高精度校时两种校时方式： OBDH校时：也分为两种情况：一种是OBDH周期性向AOCC发送卫星时间，发送周期为1分钟。另一种是当在上电和复位后，由应用软件主动发出校时申请，完成校时； GPS高精度校时。 OBDH星时校时为系统默认使用的校时方式。GPS秒脉冲高精度时间是否引入系统由注入指令执行控制：若注入指令表示“使用GPS秒脉冲高精度校时时间”，则当满足GPS秒脉冲高精度校时条件时AOCC应用软件仅进行GPS秒脉冲高精度校时时间的计算，系统使用该时间。GPS秒脉冲高精度方式优先级高于OBDH星时校时，当GPS秒脉冲校时时不再进行OBDH星时校时。如果连续超过1分钟均不满足GPS秒脉冲高精度校时条件，则可进行OBDH星时校时。一旦再满足GPS秒脉冲高精度校时条件则继续采用GPS秒脉冲高精度校时。其中GPS秒脉冲高精度校时条件及校时计算具体见任务书中规定。 （2）CPU内部星时时钟的星时采集计算与校时 CPU内部星时时钟星时计算方法。同CPU外部星时时钟星时计算；CPU内部星时时钟星时校时只包括OBDH校时：分为两种情况：一种是OBDH周期性向AOCC发送卫星时间，发送周期为1分钟。另一种是当在上电和复位后，由应用软件主动发出校时申请，完成校时。 星时的选取 根据注入的姿控数据块2中的CPU星时时钟选用标志来实现内部星时时钟和外部星时时钟的切换，默认为CPU外部星时时钟 均匀校时 内部和外部时钟星时计算中在计算完本周期绝对星时后增加每周期修正量，并在计算前先将它限幅到1毫秒，每周期的修正量初始为0，通过内存修改来修改该修正量。",
    "LLM inference": "['GetData STCounter {stellarCount};', 'Compute DetAtt stellarTime {stellarCount};', 'In [60s, 60s] GetData OBDH {timeCode};', 'ProTC OBDH {timeCode} Finished Within 1s;', 'Compute AttCtrl attimombias {stellarTime};', 'ProTC AOCC {attimombias} Finished Within 1ms;']",
    "LLM total answer": "```json\n{\n  \"BNF Grammar\": {\n    \"<OperationalStmt>\": \"<TimeConstraint>? <AutomicFunc> <CapabilitySpec>? <TimeConsDef>? ';'\",\n    \"<AutomicFunc>\": \"<InitFunc> | <GetDataFunc> | <SendDataFunc> | <ComputeFunc> | <ProTMFunc> | <ProTCFunc>\",\n    \"<GetDataFunc>\": \"'GetData' <DeviceName> '{' <DataSet> '}'\",\n    \"<ComputeFunc>\": \"<ComputeType> <OutputData> <InputData>\",\n    \"<ProTCFunc>\": \"'ProTC' <DeviceName> '{' <DataSet> '}'\",\n    \"<ComputeType>\": \"'DetAtt' | 'AttCtrl'\",\n    \"<TimeConstraint>\": \"<InConstraint> | <AfterConstraint>\",\n    \"<InConstraint>\": \"'In' '[' <Time> ',' <Time> ']'\",\n    \"<TimeConsDef>\": \"'Finished' 'Within' <Time>\"\n  },\n  \"Device Library\": [\"STCounter\", \"OBDH\", \"AOCC\"],\n  \"Data Dictionary\": [\"stellarCount\", \"stellarTime\", \"timeCode\", \"attimombias\"],\n  \"Output DSL\": [\n    \"GetData STCounter {stellarCount};\",\n    \"Compute DetAtt stellarTime {stellarCount};\",\n    \"In [60s, 60s] GetData OBDH {timeCode};\",\n    \"ProTC OBDH {timeCode} Finished Within 1s;\",\n    \"Compute AttCtrl attimombias {stellarTime};\",\n    \"ProTC AOCC {attimombias} Finished Within 1ms;\"\n  ]\n}\n```"
  },
  {
    "Requirement": "功能描述：接收遥控固定参数注入块的在轨维护功能参数设置区数据 处理： 调整程序替换区模块代号1~8的初装值。",
    "LLM inference": "ProTC OBDH {param_setting_area, module_init_values};",
    "LLM total answer": "```json\n{\n  \"BNF Grammar\": {\n    \"<OperationalStmt>\": \"<AutomicFunc> ';'\",\n    \"<AutomicFunc>\": \"<ProTCFunc>\",\n    \"<ProTCFunc>\": \"'ProTC' <DeviceName> '{' <DataSet> '}'\",\n    \"<DeviceName>\": \"<Identifier>\",\n    \"<DataSet>\": \"<Identifier> (',' <Identifier>)*\",\n    \"<Identifier>\": \"[a-zA-Z_] [a-zA-Z0-9_]*\"\n  },\n  \"Device Library\": {\n    \"OBDH\": \"数管计算机\"\n  },\n  \"Data Dictionary\": {\n    \"param_setting_area\": \"在轨维护功能参数设置区数据\",\n    \"module_init_values\": \"程序替换区模块初装值\"\n  },\n  \"Output DSL\": \"ProTC OBDH {param_setting_area, module_init_values};\"\n}\n```"
  },
  {
    "Requirement": "功能描述：滚动通道喷气中断处理程序。 处理：将推力器1-8关掉",
    "LLM inference": "SendData thrusterCtrlBus {jetPower};",
    "LLM total answer": "```json\n{\n  \"BNF Grammar\": {\n    \"<OperationalStmt>\": \"<AutomicFunc> ';'\",\n    \"<AutomicFunc>\": \"<SendDataFunc>\",\n    \"<SendDataFunc>\": \"'SendData' <DeviceName> '{' <DataSet> '}'\",\n    \"<DeviceName>\": \"<Identifier>\",\n    \"<DataSet>\": \"<Identifier>\"\n  },\n  \"Device Library\": [\"thrusterCtrlBus\"],\n  \"Data Dictionary\": [\"jetPower\"],\n  \"Output DSL\": \"SendData thrusterCtrlBus {jetPower};\"\n}\n```"
  },
  {
    "Requirement": "功能描述：二次电源切换。 处理： ACU内部含有两套二次电源，两套互为备份，可以同时加电工作，通常仅一份工作。AOCC每个控制周期采集工作电源的状态模拟量，并设置当班状态（5V和12V遥测模拟量≥3V即当班，若同时符合条件则置主份当班），若连续4个控制周期两套电源均不当班，且允许自主切换，则连续两个控制周期先后发送主份电源开、备份电源关两条指令，并置主份当班。 若当班电源的5V或12V遥测模拟量连续5个控制周期<3V时，且允许自主切换，则连续两个控制周期先后发送另一份电源开、本电源关两条指令，并禁止自主切换；若禁止自主切换，则设置切机命令字。 上电/复位初始化为允许自主切换，当班标志为保持。",
    "LLM inference": "['Init AOCC.CR {true, true};', 'Over(1s, nc, 4) Compute Diagnose currentmode {attiangT} Finished Within 100ms;', 'ProTC CR {currentmode};', 'Over(1s, nc, 5) SwitchMode currentmode {attiangT} ReqCapByFormula V_condition;', 'ProTC CR {currentmode} Finished Within 200ms;']",
    "LLM total answer": "```json\n{\n  \"BNF Grammar\": {\n    \"<OperationalStmt>\": \"<TimeConstraint>? <AutomicFunc> <CapabilitySpec>? <TimeConsDef>? ';'\",\n    \"<AutomicFunc>\": \"<InitFunc> | <ComputeFunc> | <ProTCFunc> | <SwitchMode>\",\n    \"<InitFunc>\": \"'Init' <PortName> <Config>\",\n    \"<ComputeFunc>\": \"<ComputeType> <OutputData> <InputData>\",\n    \"<ProTCFunc>\": \"'ProTC' <DeviceName> '{' <DataSet> '}'\",\n    \"<SwitchMode>\": \"'SwitchMode' <OutputData> <InputData>\",\n    \"<TimeConstraint>\": \"<OverConstraint>\",\n    \"<OverConstraint>\": \"'Over' '(' <Time> ',' 'nc' ',' <Number> ')'\"\n  },\n  \"Device Library\": {\n    \"Controller\": [\"AOCC\"],\n    \"Actuator\": [\"CR\"]\n  },\n  \"Data Dictionary\": {\n    \"currentmode\": \"工作模式字\",\n    \"attiangT\": \"目标角度\"\n  },\n  \"Output DSL\": [\n    \"Init AOCC.CR {true, true};\",\n    \"Over(1s, nc, 4) Compute Diagnose currentmode {attiangT} Finished Within 100ms;\",\n    \"ProTC CR {currentmode};\",\n    \"Over(1s, nc, 5) SwitchMode currentmode {attiangT} ReqCapByFormula V_condition;\",\n    \"ProTC CR {currentmode} Finished Within 200ms;\"\n  ]\n}\n```"
  },
  {
    "Requirement": "软件需求名称：部件加断电  需求类别：其他  软件需求描述：对部件加断电指令的处理。",
    "LLM inference": "['SendData DSS {dssPower};', 'SendData Gyro3F {gyroPower};', 'SendData JET {jetPower};', 'SendData CR {currentmode};', 'SendData mwSys {currentmode};']",
    "LLM total answer": "```json\n{\n  \"BNF Grammar\": {\n    \"OperationalStmt\": \"<TimeConstraint>? <AutomicFunc> <CapabilitySpec>? <TimeConsDef>? ';'\",\n    \"AutomicFunc\": \"<InitFunc> | <GetDataFunc> | <SendDataFunc> | <ComputeFunc> | <ProTMFunc> | <ProTCFunc>\",\n    \"SendDataFunc\": \"'SendData' <DeviceName> '{' <DataSet> '}'\",\n    \"DeviceName\": \"<Identifier>\",\n    \"DataSet\": \"<Identifier> (',' <Identifier>)*\"\n  },\n  \"Device Library\": [\"DSS\", \"Gyro3F\", \"JET\", \"CR\", \"mwSys\"],\n  \"Data Dictionary\": [\"dssPower\", \"gyroPower\", \"jetPower\", \"currentmode\"],\n  \"Output DSL\": [\n    \"SendData DSS {dssPower};\",\n    \"SendData Gyro3F {gyroPower};\",\n    \"SendData JET {jetPower};\",\n    \"SendData CR {currentmode};\",\n    \"SendData mwSys {currentmode};\"\n  ]\n}\n```"
  },
  {
    "Requirement": "功能描述：利用星敏感器数据计算卫星对惯性的角速度在本体系的分量",
    "LLM inference": "DetAtt {attirate} {attiang};",
    "LLM total answer": "```json\n{\n  \"BNF Grammar\": {\n    \"<OperationalStmt>\": \"<AutomicFunc> ';'\",\n    \"<AutomicFunc>\": \"<ComputeFunc>\",\n    \"<ComputeFunc>\": \"<ComputeType> <OutputData> <InputData>\",\n    \"<ComputeType>\": \"'DetAtt'\",\n    \"<OutputData>\": \"'{' <IdentifierList> '}'\",\n    \"<InputData>\": \"'{' <IdentifierList> '}'\",\n    \"<IdentifierList>\": \"<Identifier> (',' <Identifier>)*\",\n    \"<Identifier>\": \"[a-zA-Z_][a-zA-Z0-9_]*\"\n  },\n  \"Device Library\": {\n    \"Sensor\": \"星敏感器(SS)\"\n  },\n  \"Data Dictionary\": {\n    \"Input\": \"attiang\",\n    \"Output\": \"attirate\"\n  },\n  \"Output DSL\": \"DetAtt {attirate} {attiang};\"\n}\n```"
  },
  {
    "Requirement": "功能描述：将GPS轨道参数转换成16个轨道参数",
    "LLM inference": "OrbitCtrl {OrbitParams16} {GPSOrbitParams};",
    "LLM total answer": "```json\n{\n  \"BNF Grammar\": {\n    \"<OperationalStmt>\": \"<AutomicFunc> ';'\",\n    \"<AutomicFunc>\": \"<ComputeFunc>\",\n    \"<ComputeFunc>\": \"<ComputeType> <OutputData> <InputData>\",\n    \"<ComputeType>\": \"'OrbitCtrl'\",\n    \"<OutputData>\": \"'{' <IdentifierList> '}'\",\n    \"<InputData>\": \"'{' <IdentifierList> '}'\",\n    \"<IdentifierList>\": \"<Identifier> (',' <Identifier>)*\",\n    \"<Identifier>\": \"[a-zA-Z_] [a-zA-Z0-9_]*\"\n  },\n  \"Device Library\": {},\n  \"Data Dictionary\": {\n    \"GPSOrbitParams\": \"GPS原始轨道参数\",\n    \"OrbitParams16\": \"16个转换后的轨道参数\"\n  },\n  \"Output DSL\": \"OrbitCtrl {OrbitParams16} {GPSOrbitParams};\"\n}\n```"
  },
  {
    "Requirement": "序|需求名称|编号|功能及处理描述 |加电状态的采集与处理|FREQ7.1|从SDC获取部件供电状态信息 |切换指令的处理|FREQ7.2|发送SDC指令。",
    "LLM inference": "GetData CR {dssPower, jetPower, gyroPower};\nSendData CR {dssPower, jetPower, gyroPower};",
    "LLM total answer": "```json\n{\n  \"BNF Grammar\": {\n    \"<OperationalStmt>\": \"<TimeConstraint>? <AutomicFunc> <CapabilitySpec>? <TimeConsDef>? ';'\",\n    \"<AutomicFunc>\": \"<InitFunc> | <GetDataFunc> | <SendDataFunc> | <ComputeFunc> | <ProTMFunc> | <ProTCFunc>\",\n    \"<GetDataFunc>\": \"'GetData' <DeviceName> '{' <DataSet> '}'\",\n    \"<SendDataFunc>\": \"'SendData' <DeviceName> '{' <DataSet> '}'\",\n    \"<DeviceName>\": \"<Identifier>\",\n    \"<DataSet>\": \"<Identifier> (',' <Identifier>)*\"\n  },\n  \"Device Library\": {\n    \"CR\": \"控制寄存器\"\n  },\n  \"Data Dictionary\": {\n    \"dssPower\": \"太阳敏感器加断电开关信号\",\n    \"jetPower\": \"推力器开关信号\", \n    \"gyroPower\": \"陀螺开关信号\"\n  },\n  \"Output DSL\": \"GetData CR {dssPower, jetPower, gyroPower};\\nSendData CR {dssPower, jetPower, gyroPower};\"\n}\n```"
  },
  {
    "Requirement": "功能：利用星敏感器B的测量，修正姿态四元数与姿态角速度。",
    "LLM inference": "DetAtt {attiang, attirate} {SSB_Attitude};",
    "LLM total answer": "```json\n{\n  \"BNF Grammar\": {\n    \"OperationalStmt\": \"<AutomicFunc> ';'\",\n    \"AutomicFunc\": \"<ComputeFunc>\",\n    \"ComputeFunc\": \"<ComputeType> <OutputData> <InputData>\",\n    \"ComputeType\": \"'DetAtt'\",\n    \"OutputData\": \"{<IdentifierList>}\",\n    \"InputData\": \"{<IdentifierList>}\",\n    \"IdentifierList\": \"<Identifier> (',' <Identifier>)*\"\n  },\n  \"Device Library\": [\"SS\"],\n  \"Data Dictionary\": [\"attiang\", \"attirate\", \"SSB_Attitude\"],\n  \"Output DSL\": \"DetAtt {attiang, attirate} {SSB_Attitude};\"\n}\n```"
  },
  {
    "Requirement": "功能描述：利用星敏感器B的测量，修正姿态四元数与估计陀螺漂移。",
    "LLM inference": "DetAtt {quaternion, gyroDriftEst} {SS_attitude};",
    "LLM total answer": "```json\n{\n  \"BNF Grammar\": {\n    \"OperationalStmt\": \"<TimeConstraint>? <AutomicFunc> <CapabilitySpec>? <TimeConsDef>? ';'\",\n    \"AutomicFunc\": \"<InitFunc> | <GetDataFunc> | <SendDataFunc> | <ComputeFunc> | <ProTMFunc> | <ProTCFunc>\",\n    \"ComputeFunc\": \"<ComputeType> <OutputData> <InputData>\",\n    \"ComputeType\": \"'OrbitCtrl' | 'ProVld' | 'DetAtt' | 'AttCtrl' | 'Diagnose' | 'SwitchMode'\",\n    \"OutputData\": \"<Identifier> | '{' <IdentifierList> '}'\",\n    \"InputData\": \"<Identifier> | '{' <IdentifierList> '}'\"\n  },\n  \"Device Library\": {\n    \"Sensor\": \"星敏感器(SS)\"\n  },\n  \"Data Dictionary\": {\n    \"quaternion\": \"姿态四元数\",\n    \"gyroDriftEst\": \"陀螺漂移估计值\",\n    \"SS_attitude\": \"星敏感器B姿态测量数据\"\n  },\n  \"Output DSL\": \"DetAtt {quaternion, gyroDriftEst} {SS_attitude};\"\n}\n```"
  },
  {
    "Requirement": "轨道计算包括卫星轨道和太阳方位计算、中继卫星轨道计算；GPS计算包括GPS数据转换为轨道平根数计算、GPS平根数数据转换为外推轨道数据计算；地磁场计算为通过轨道外推数据计算地磁场矢量分量。",
    "LLM inference": "OrbitCtrl {satOrbit, sunPosition} {GPSData};\nOrbitCtrl {relayOrbit} {satOrbit};\nOrbitCtrl {OrbitRootNum} {GPSData};\nOrbitCtrl {ExtrapOrbitData} {OrbitRootNum};\nOrbitCtrl {GeomagneticVec} {ExtrapOrbitData};",
    "LLM total answer": "```json\n{\n  \"BNF Grammar\": {\n    \"OperationalStmt\": \"<TimeConstraint>? <AutomicFunc> <CapabilitySpec>? <TimeConsDef>? ';'\",\n    \"AutomicFunc\": \"<InitFunc> | <GetDataFunc> | <SendDataFunc> | <ComputeFunc>\",\n    \"ComputeFunc\": \"<ComputeType> <OutputData> <InputData>\",\n    \"ComputeType\": \"'OrbitCtrl' | 'ProVld' | 'DetAtt' | 'AttCtrl' | 'Diagnose' | 'SwitchMode'\",\n    \"OutputData\": \"'{' <IdentifierList> '}'\",\n    \"InputData\": \"'{' <IdentifierList> '}'\",\n    \"IdentifierList\": \"<Identifier> (',' <Identifier>)*\"\n  },\n  \"Device Library\": {\n    \"Sensor\": [\"太阳敏感器(DSS)\", \"星敏感器(SS)\"],\n    \"ExtComputer\": [\"数管计算机(OBDH)\"]\n  },\n  \"Data Dictionary\": {\n    \"GPS数据\": \"GPSData\",\n    \"轨道平根数\": \"OrbitRootNum\",\n    \"外推轨道数据\": \"ExtrapOrbitData\",\n    \"地磁场矢量分量\": \"GeomagneticVec\"\n  },\n  \"Output DSL\": \"OrbitCtrl {satOrbit, sunPosition} {GPSData};\\nOrbitCtrl {relayOrbit} {satOrbit};\\nOrbitCtrl {OrbitRootNum} {GPSData};\\nOrbitCtrl {ExtrapOrbitData} {OrbitRootNum};\\nOrbitCtrl {GeomagneticVec} {ExtrapOrbitData};\"\n}\n```"
  },
  {
    "Requirement": "对上行注入的数据接收判断累加和正确后，在解包之前需判断帧头和特征码，只有校验均通过才进行解包，否则不予处理。 对从敏感器采集的数据进行累加和校验，只有通过校验的数据才引入计算。 对重要的标志等变量进行三取二保护。 重要数据保存在OBDH中，当发生切机或复位时可以从OBDH中恢复系统状态。 在控制软件设计和实现中，除超时处理的死循环外，杜绝使用无限循环语句。 对模块中使用的局部变量，每次调用时都需明确赋值；不使用堆内存分配。",
    "LLM inference": "['ProTC Bus {frameHeader, featureCode} ReqCapByTable ChecksumVerification;', 'ComputeFunc Diagnose {validData} {sensorData} ReqCapByFormula ChecksumValidation;', 'ProTC AOCC {importantFlag} ReqCapByPseudoCode TripleRedundancy;', 'SendData OBDH {systemState};', 'GetData OBDH {systemState};', 'Init Software.Design {noInfiniteLoops} ReqCapByFlowChart ControlStructure;', 'Init Memory.Allocation {stackOnly, explicitAssignment};']",
    "LLM total answer": "```json\n{\n  \"BNF Grammar\": {\n    \"<OperationalStmt>\": \"<TimeConstraint>? <AutomicFunc> <CapabilitySpec>? <TimeConsDef>? ';'\",\n    \"<AutomicFunc>\": \"<InitFunc> | <GetDataFunc> | <SendDataFunc> | <ComputeFunc> | <ProTMFunc> | <ProTCFunc>\",\n    \"<InitFunc>\": \"'Init' <PortName> <Config>\",\n    \"<ComputeFunc>\": \"<ComputeType> <OutputData> <InputData>\",\n    \"<ProTCFunc>\": \"'ProTC' <DeviceName> '{' <DataSet> '}'\",\n    \"<SendDataFunc>\": \"'SendData' <DeviceName> '{' <DataSet> '}'\",\n    \"<GetDataFunc>\": \"'GetData' <DeviceName> '{' <DataSet> '}'\",\n    \"<CapabilitySpec>\": \"('ReqCapByNL' | 'ReqCapByTable' | 'ReqCapByFormula' | 'ReqCapByPseudoCode' | 'ReqCapByFlowChart') <Identifier>\"\n  },\n  \"Device Library\": {\n    \"OBDH\": \"ExtComputer\",\n    \"Bus\": \"Sensor\",\n    \"AOCC\": \"Controller\"\n  },\n  \"Data Dictionary\": {\n    \"systemState\": \"状态数据\",\n    \"importantFlag\": \"重要标志\",\n    \"sensorData\": \"敏感器数据\",\n    \"validData\": \"校验通过数据\"\n  },\n  \"Output DSL\": [\n    \"ProTC Bus {frameHeader, featureCode} ReqCapByTable ChecksumVerification;\",\n    \"ComputeFunc Diagnose {validData} {sensorData} ReqCapByFormula ChecksumValidation;\",\n    \"ProTC AOCC {importantFlag} ReqCapByPseudoCode TripleRedundancy;\",\n    \"SendData OBDH {systemState};\",\n    \"GetData OBDH {systemState};\",\n    \"Init Software.Design {noInfiniteLoops} ReqCapByFlowChart ControlStructure;\",\n    \"Init Memory.Allocation {stackOnly, explicitAssignment};\"\n  ]\n}\n```"
  },
  {
    "Requirement": "序|需求名称|编号|输入|输出|功能及处理描述 |星时计算|FREQ1.4.1|上周期绝对星时；上周期锁存的星时计数器的值|本周期的绝对星时|\"每周期无条件的进行星时的计算。处理要求见任务书。 \" |OBDH星时校时|FREQ1.4.2|\"OBDH校时指令中的绝对星时; 及对应锁存的对应时间的星时计数器的值\"|上周期绝对星时；上周期锁存的星时计数器的值|采用OBDH校时方式时，每秒有OBDH校时指令时进行校时。处理见任务书。 |GPS秒脉冲高精度校时|FREQ1.4.3|\"GPS秒脉冲校时指令中的绝对星时; 及对应锁存的对应时间的星时计数器的值\"|上周期绝对星时；上周期锁存的星时计数器的值|采用GPS秒脉冲方式时，每秒有GPS秒脉冲指令时进行校时。处理要求见任务书。 |两种校时方式的切换|FREQ1.4.4||校时方式标志|OBDH星时校时、GPS秒脉冲高精度校时是否引入系统由注入指令控制，OBDH星时校时为系统默认使用的校时方式。具体见任务书要求 |均匀校时|FREQ1.4.5|\"本周期的绝对星时； 均匀校时补偿量\"|\"本周期的绝对星时； \"|应用软件每次进行星时计算时，将计算后的绝对星时加上均匀校时补偿量作为本周期的补偿后的绝对星时。 |星敏感器数据星时时标处理|FREQ1.4.6|同步标志；本周期的绝对星时；本周期锁存星时计数值；锁存的星敏同步计数值|星敏感器测量数据对应的星时|具体处理要求见任务书。",
    "LLM inference": "['Compute OrbitCtrl {stellarTime} {timeCode, stellarCount};', 'At(1s) ProTC OBDH {stellarTime, stellarCount} Finished Within 10ms;', 'Compute SwitchMode currentmode {};', 'At(1s) ProTM AOCC {stellarTime, stellarCount} Finished Within 10ms;', 'Compute OrbitCtrl {stellarTime} {stellarTime, 0x3E8};', 'GetData SS {stellarTime} After(100ms);']",
    "LLM total answer": "```json\n{\n  \"BNF Grammar\": {\n    \"<OperationalStmt>\": \"<TimeConstraint>? <AutomicFunc> <CapabilitySpec>? <TimeConsDef>? ';'\",\n    \"<AutomicFunc>\": \"<InitFunc> | <GetDataFunc> | <SendDataFunc> | <ComputeFunc> | <ProTMFunc> | <ProTCFunc>\",\n    \"<ComputeFunc>\": \"<ComputeType> <OutputData> <InputData>\",\n    \"<ComputeType>\": \"'OrbitCtrl' | 'ProVld' | 'DetAtt' | 'AttCtrl' | 'Diagnose' | 'SwitchMode'\",\n    \"<TimeConstraint>\": \"<AtConstraint> | <InConstraint> | <AfterConstraint> | <OverConstraint>\",\n    \"<AtConstraint>\": \"'At' '(' <Time> (',' <Time>)? ')'\"\n  },\n  \"Device Library\": {\n    \"Sensor\": [\"STCounter\"],\n    \"ExtComputer\": [\"OBDH\"],\n    \"Controller\": [\"AOCC\"]\n  },\n  \"Data Dictionary\": {\n    \"InputData\": [\"timeCode\", \"stellarCount\", \"stellarTime\"],\n    \"OutputData\": [\"stellarTime\", \"stellarCount\", \"currentmode\"]\n  },\n  \"Output DSL\": [\n    \"Compute OrbitCtrl {stellarTime} {timeCode, stellarCount};\",\n    \"At(1s) ProTC OBDH {stellarTime, stellarCount} Finished Within 10ms;\",\n    \"Compute SwitchMode currentmode {};\",\n    \"At(1s) ProTM AOCC {stellarTime, stellarCount} Finished Within 10ms;\",\n    \"Compute OrbitCtrl {stellarTime} {stellarTime, 0x3E8};\",\n    \"GetData SS {stellarTime} After(100ms);\"\n  ]\n}\n```"
  },
  {
    "Requirement": "功能描述：检测红外HL、HR 的故障，并选取正确的红外信号。",
    "LLM inference": "Diagnose {faultStatus, selectedInfrared} {infraredHL, infraredHR};",
    "LLM total answer": "```json\n{\n  \"BNF Grammar\": {\n    \"<OperationalStmt>\": \"<TimeConstraint>? <AutomicFunc> <CapabilitySpec>? <TimeConsDef>? ';'\",\n    \"<AutomicFunc>\": \"<InitFunc> | <GetDataFunc> | <SendDataFunc> | <ComputeFunc> | <ProTMFunc> | <ProTCFunc>\",\n    \"<ComputeFunc>\": \"<ComputeType> <OutputData> <InputData>\",\n    \"<ComputeType>\": \"'OrbitCtrl' | 'ProVld' | 'DetAtt' | 'AttCtrl' | 'Diagnose' | 'SwitchMode'\",\n    \"<OutputData>\": \"<Identifier> | '{' <IdentifierList> '}'\",\n    \"<InputData>\": \"<Identifier> | '{' <IdentifierList> '}'\"\n  },\n  \"Device Library\": {},\n  \"Data Dictionary\": {\n    \"faultStatus\": \"红外故障状态标识\",\n    \"selectedInfrared\": \"选择后的有效红外信号\",\n    \"infraredHL\": \"左红外传感器信号\",\n    \"infraredHR\": \"右红外传感器信号\"\n  },\n  \"Output DSL\": \"Diagnose {faultStatus, selectedInfrared} {infraredHL, infraredHR};\"\n}\n```"
  },
  {
    "Requirement": "功能描述：与星敏感器通讯，获得星敏感器数据。 处理： 在使用星敏感器之前需对其进行初始化，在每个控制周期的开始向S星敏感器发出R信号，并通过串口得到S星敏感器提供的数据。在AO与S星敏感器通信过程中，AO始终处于主动状态。当AO发出R信号下降沿后星敏感器在5ms内返回数据，AO在接收完数据后把R信号置高电平，星敏感器在R信号的上升沿之后的1ms内停止发送数据。 AO为Astro10星敏感器和S星敏感器配置了2个独立的UART，分别各有256byte的FO缓存。因此可以对Astro10星敏感器和S星敏感器同时发出R信号，交替进行进行数据FO缓冲区数据读取。 与APS星敏感器通讯故障时，不使用APS星敏感器数据进行姿态修正。",
    "LLM inference": "['Init AOCC.SS_UART {9600,8,N,1};', 'At(0ms) GetData SS {AttiangSS} Finished Within 5ms;', 'Init AOCC.Astro10_UART {9600,8,N,1};', 'At(0ms) GetData Astro10 {AttiangSS} Finished Within 5ms;']",
    "LLM total answer": "```json\n{\n  \"BNF Grammar\": {\n    \"<OperationalStmt>\": \"<TimeConstraint>? <AutomicFunc> <CapabilitySpec>? <TimeConsDef>? ';'\",\n    \"<AutomicFunc>\": \"<InitFunc> | <GetDataFunc>\",\n    \"<InitFunc>\": \"'Init' <PortName> <Config>\",\n    \"<GetDataFunc>\": \"'GetData' <DeviceName> '{' <DataSet> '}'\",\n    \"<TimeConstraint>\": \"<AtConstraint>\",\n    \"<TimeConsDef>\": \"'Finished' 'Within' <Time>\",\n    \"<PortName>\": \"<Identifier> '.' <Identifier>\",\n    \"<Config>\": \"'{' <LiteralList> '}'\",\n    \"<LiteralList>\": \"<Literal> (',' <Literal>)*\",\n    \"<Time>\": \"<Number> 'ms'\"\n  },\n  \"Device Library\": {\n    \"SS\": \"星敏感器\",\n    \"AOCC\": \"中央控制单元\",\n    \"Astro10\": \"星敏感器\"\n  },\n  \"Data Dictionary\": {\n    \"AttiangSS\": \"星敏感器提供的数据\",\n    \"R_signal\": \"控制信号\",\n    \"UART_config\": \"{9600,8,N,1}\",\n    \"FO_buffer\": \"256byte\"\n  },\n  \"Output DSL\": [\n    \"Init AOCC.SS_UART {9600,8,N,1};\",\n    \"At(0ms) GetData SS {AttiangSS} Finished Within 5ms;\",\n    \"Init AOCC.Astro10_UART {9600,8,N,1};\",\n    \"At(0ms) GetData Astro10 {AttiangSS} Finished Within 5ms;\"\n  ]\n}\n```"
  },
  {
    "Requirement": "功能描述：CAN通信上行/下行数据的组帧和解包。 调用条件：每个控制任务模式计算完成后； 输入：计算结果。 输出：按照协议组帧数据。 处理：主要完成下列数据组帧、解包功能：星务接收、星务发送、快帧遥测1打包、快帧遥测2打包、轨道参数注入快帧打包、内存下卸快帧打包、慢帧遥测1打包、慢帧遥测2打包、慢帧遥测3打包、姿控广播、热控温度广播、重要数据打包、上行:目标星轨道、上行:数据指令响应处理、上行:固定地址注入解包、上行:可变地址注入解包、上行:轨道注入解包、上行:程序注入、上行:内存下卸指令注入、上行:部件指令、上行:任务块、重要数据返回解包、GNSS定位广播解包、整星广播对时解包、GNSS高精度秒脉冲对时广播解包、CAN总线使用要求",
    "LLM inference": "After (0s) ProTM Bus {星务接收,星务发送,快帧遥测1打包,快帧遥测2打包,轨道参数注入快帧打包,内存下卸快帧打包,慢帧遥测1打包,慢帧遥测2打包,慢帧遥测3打包,姿控广播,热控温度广播,重要数据打包,上行目标星轨道,上行数据指令响应处理,上行固定地址注入解包,上行可变地址注入解包,上行轨道注入解包,上行程序注入,上行内存下卸指令注入,上行部件指令,上行任务块,重要数据返回解包,GNSS定位广播解包,整星广播对时解包,GNSS高精度秒脉冲对时广播解包,CAN总线使用要求} ReqCapByNL CAN总线使用要求;",
    "LLM total answer": "```json\n{\n  \"BNF Grammar\": {\n    \"<OperationalStmt>\": \"<TimeConstraint>? <AutomicFunc> <CapabilitySpec>? <TimeConsDef>? ';'\",\n    \"<AutomicFunc>\": \"<ProTMFunc>\",\n    \"<ProTMFunc>\": \"'ProTM' <DeviceName> '{' <DataSet> '}'\",\n    \"<TimeConstraint>\": \"<AfterConstraint>\",\n    \"<AfterConstraint>\": \"'After' '(' <Time> ')'\",\n    \"<DeviceName>\": \"<Identifier>\",\n    \"<DataSet>\": \"<Identifier> (',' <Identifier>)*\",\n    \"<CapabilitySpec>\": \"'ReqCapByNL' <Identifier>\",\n    \"<Time>\": \"<Number> 's'\"\n  },\n  \"Device Library\": [\"Bus\"],\n  \"Data Dictionary\": [\"计算结果\"],\n  \"Output DSL\": \"After (0s) ProTM Bus {星务接收,星务发送,快帧遥测1打包,快帧遥测2打包,轨道参数注入快帧打包,内存下卸快帧打包,慢帧遥测1打包,慢帧遥测2打包,慢帧遥测3打包,姿控广播,热控温度广播,重要数据打包,上行目标星轨道,上行数据指令响应处理,上行固定地址注入解包,上行可变地址注入解包,上行轨道注入解包,上行程序注入,上行内存下卸指令注入,上行部件指令,上行任务块,重要数据返回解包,GNSS定位广播解包,整星广播对时解包,GNSS高精度秒脉冲对时广播解包,CAN总线使用要求} ReqCapByNL CAN总线使用要求;\"\n}\n```"
  },
  {
    "Requirement": "卫星姿态角大于预定值时，软件可自动进入全姿态捕获模式，对日定向。 通过磁力矩器进行控制，减少燃料消耗。",
    "LLM inference": "SwitchMode {currentmode} {attiang, attiangT};\nProTC CR {CSM};",
    "LLM total answer": "```json\n{\n  \"BNF Grammar\": {\n    \"<OperationalStmt>\": \"<TimeConstraint>? <AutomicFunc> <CapabilitySpec>? <TimeConsDef>? ';'\",\n    \"<AutomicFunc>\": \"<InitFunc> | <GetDataFunc> | <SendDataFunc> | <ComputeFunc> | <ProTMFunc> | <ProTCFunc>\",\n    \"<ComputeFunc>\": \"<ComputeType> <OutputData> <InputData>\",\n    \"<ComputeType>\": \"'SwitchMode'\",\n    \"<ProTCFunc>\": \"'ProTC' <DeviceName> '{' <DataSet> '}'\",\n    \"<OutputData>\": \"'{' <IdentifierList> '}'\",\n    \"<InputData>\": \"'{' <IdentifierList> '}'\",\n    \"<IdentifierList>\": \"<Identifier> (',' <Identifier>)*\",\n    \"<DeviceName>\": \"<Identifier>\",\n    \"<DataSet>\": \"<Identifier> (',' <Identifier>)*\"\n  },\n  \"Device Library\": {\n    \"Controller\": \"CR\"\n  },\n  \"Data Dictionary\": {\n    \"currentmode\": \"工作模式字\",\n    \"attiang\": \"三轴姿态角\",\n    \"attiangT\": \"目标角度\",\n    \"CSM\": \"对日巡航模式\"\n  },\n  \"Output DSL\": \"SwitchMode {currentmode} {attiang, attiangT};\\nProTC CR {CSM};\"\n}\n```"
  },
  {
    "Requirement": "功能描述：利用GPS通道板数据进行GPS定轨程序。",
    "LLM inference": "OrbitCtrl {orbitParams} {GPSChannelData};",
    "LLM total answer": "```json\n{\n  \"BNF Grammar\": {\n    \"OperationalStmt\": \"<TimeConstraint>? <AutomicFunc> <CapabilitySpec>? <TimeConsDef>? ';'\",\n    \"AutomicFunc\": \"<InitFunc> | <GetDataFunc> | <SendDataFunc> | <ComputeFunc> | <ProTMFunc> | <ProTCFunc>\",\n    \"ComputeFunc\": \"<ComputeType> <OutputData> <InputData>\",\n    \"ComputeType\": \"'OrbitCtrl' | 'ProVld' | 'DetAtt' | 'AttCtrl' | 'Diagnose' | 'SwitchMode'\",\n    \"OutputData\": \"<Identifier> | '{' <IdentifierList> '}'\",\n    \"InputData\": \"<Identifier> | '{' <IdentifierList> '}'\",\n    \"IdentifierList\": \"<Identifier> (',' <Identifier>)*\",\n    \"Identifier\": \"[a-zA-Z_] [a-zA-Z0-9_]*\"\n  },\n  \"Device Library\": {\n    \"ExtComputer\": \"数管计算机(OBDH)\"\n  },\n  \"Data Dictionary\": {\n    \"GPSChannelData\": \"GPS通道板数据\",\n    \"orbitParams\": \"定轨程序输出的轨道参数\"\n  },\n  \"Output DSL\": \"OrbitCtrl {orbitParams} {GPSChannelData};\"\n}\n```"
  },
  {
    "Requirement": "滚动俯仰通道发动机计数器中断处理时间小于25μs。 偏航通道发动机计数器中断处理时间小于25μs。",
    "LLM inference": "['ProTC AOCC {} Finished Within 25us;', 'ProTC AOCC {} Finished Within 25us;']",
    "LLM total answer": "```json\n{\n  \"BNF Grammar\": {\n    \"<OperationalStmt>\": \"<TimeConstraint>? <AutomicFunc> <CapabilitySpec>? <TimeConsDef>? ';'\",\n    \"<AutomicFunc>\": \"<ProTCFunc>\",\n    \"<ProTCFunc>\": \"'ProTC' <DeviceName> '{' <DataSet> '}'\",\n    \"<TimeConsDef>\": \"'Finished' 'Within' <Time>\",\n    \"<Time>\": \"<Number> ('s' | 'ms' | 'us')\",\n    \"<DeviceName>\": \"<Identifier>\",\n    \"<Number>\": \"'0' | [1-9][0-9]*\"\n  },\n  \"Device Library\": {\n    \"AOCC\": \"中央控制单元\"\n  },\n  \"Data Dictionary\": {},\n  \"Output DSL\": [\n    \"ProTC AOCC {} Finished Within 25us;\",\n    \"ProTC AOCC {} Finished Within 25us;\"\n  ]\n}\n```"
  },
  {
    "Requirement": "功能描述：根据+Y帆板角误差控制帆板跟踪太阳。",
    "LLM inference": "AttCtrl pulseWidth {attimombias, viewCode};",
    "LLM total answer": "```json\n{\n  \"BNF Grammar\": {\n    \"<OperationalStmt>\": \"<TimeConstraint>? <AutomicFunc> <CapabilitySpec>? <TimeConsDef>? ';'\",\n    \"<AutomicFunc>\": \"<InitFunc> | <GetDataFunc> | <SendDataFunc> | <ComputeFunc> | <ProTMFunc> | <ProTCFunc>\",\n    \"<ComputeFunc>\": \"<ComputeType> <OutputData> <InputData>\",\n    \"<ComputeType>\": \"'OrbitCtrl' | 'ProVld' | 'DetAtt' | 'AttCtrl' | 'Diagnose' | 'SwitchMode'\",\n    \"<OutputData>\": \"<Identifier> | '{' <IdentifierList> '}'\",\n    \"<InputData>\": \"<Identifier> | '{' <IdentifierList> '}'\"\n  },\n  \"Device Library\": {},\n  \"Data Dictionary\": {\n    \"pulseWidth\": \"三轴控制量\",\n    \"attimombias\": \"三轴姿态角偏差\",\n    \"viewCode\": \"太阳可见标志\"\n  },\n  \"Output DSL\": \"AttCtrl pulseWidth {attimombias, viewCode};\"\n}\n```"
  }
]